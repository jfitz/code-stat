index.html
- Color scheme and graphics
- Token colors high contrast for important tokens, low contrast for others
- group languages (new, medium, old? common, obscure? by name?)
- allow selection of wide FORTRAN and wide COBOL
- omit detect results for zero confidence
 - only when no languages selected?
 - option on UI?
+ one language drop-down; three buttons (tokenize, confidence, statistics)
- modern languages include D, Lua, Scala, TypeScript (base on language year?)
- improve conversion of C++, C#, F# names
- port run_detect_test to JavaScript; don't call /detect; remove /detect

README
- don't refer to /detect
- include /statistics, /confidence, /detab, /unwrap

main
- /tokens parameter for block comment size limit
- /statistics parameter for block comment size limit
- /confidence parameter for block comment size limit
- /detect parameter for block comment size limit
- /confidence_and_statistics return both blocks
- limit text to 4K; allow larger size as option including all text
- consolidate options for --detect, --tokens, --confidence
- unwrap() returns original code if language not specified
- all services - return HTTP error if language specified and not recognized
- separate languages by comma not space ('detect x' test scripts too)
- tiebreak falls back to simpler language, not older language
+ options to enable tie-breaker adjustments (num keywords, num tokens)
+ respond 'rigoletto' for one-character input
+ respond 'silent dust' for zero data
+ respond 'bleach' for all whitespace
+ respond something else for less that 2 printable tokens
+ respond 'undetermined' if too many (how many) examiners report 1.0
+ respond 'undetermined' if all examiners report low values (how low?)

TokenBuilders
- remove result
- return direct value

- PrefixedStringTokenBuilder: options for quote stuffing, escaped quotes
- IntegerTokenBuilder (et al): don't allow underscore as final character
- StringTokenBuilder: split newline into MultilineStringTokenBuilder
- BlockTokenBuilder: parameter for case sensitive, use in checks
- BlockTokenBuilder: attempt() checks for valid chars in body
- BlockTokenBuilder: attempt() checks for start string match
- SlashStarCommentTokenBuilder: replace with BlockTokenBuilder

- directive1 - keyword at start of line (no tokens before)
- directive2 - keyword at start of line (no tokens before) to end of line

examiners for:
 Wing,
 HCL (from Hashicorp), Polar (from Oso),
 ZZ, Elm, Mint,
 Futhark (futhark-lang.org),
 Haxe, Pharo, Nim, Racket,
 SmallTalk, Chaos, Occam,
 V (vlang.io),
 Caml, ML,
 HTML with PHP, plain PHP, Elena,
 Idris (idris-lang.org/),
 Hume (macs.hw.ac.uk/~greg/hume/),
 DAML (daml.com/),
 Raku, Crystal (Ruby), Wolfram, Expresso,
 MS-DOS batch, PowerShell, bash,
 J (APL), K (APL), ABAP, Scratch, Logo,
 Oberon, Scheme, AspectJ,
 Focal, Pilot,
 dBase IV and higher, Clipper, FoxBase, FoxPro,
 DataFlex (1982), SAS,
 JCL, RPG, Lindo, SPSS, Forth, GPSS, CSMP,
 Rbase, Clarion, Rebol, Condor,
 PowerPC ASM,
 LISP, Clojure, algol,
 Pascal-S, PickBasic,
 Autocode, IPL, Arith-matic, Math-matic, COMTRAN, FACT, NELIAC, Simula,
 SNOBOL, Spitbol, CPL, BCPL, JOSS, MUMPS,
 ALPHARD, ALTRAN, Argus, Automath, COMTRAN, FLOW-MATIC,
 HOPE,
 Hypercard, ISWIM, JOVIAL, MacSyma, Mesa, Miranda, Multics Shell,
 PLANNER, SMP, Sketchpad,
 True Basic, Small Basic, BASIC-E, BBC BASIC,
 BASIC-PLUS, BASIC-PLUS-2, Amiga BASIC, QuickBasic, QBASIC,
 Turbo BASIC, FreeBasic, MSX BASIC, Pure Basic, SpiderBasic,
 VBA, MDL (Zork on GitHub), FlashBasic

Examiner
- qualifiers group for private/public/protected (unsigned/signed and const/static)
- identifier in front of open parens is a function (not BASIC, FORTRAN, COBOL)
- combine 'tabs_to_spaces()' with function in main.py
- re-think the unwrap() function (it duplicates others)

NestedCommentTokenBuilder
- limit comment size (1K? 2K? param?)

Environment

Build

Test scripts
- use variable for action
- use variable for language
- combine test script for tokens, statistics, confidence, confidence errors

main.py:decode_bytes() and run_detect_test.py
- detect Latin-1 encoding
- detect UTF-16 LE encoding

run_detect_test.py
- handle BOM

Deployment
- Python 3.7
- Remove test files
- Daily test of azure web site (/languages, /tokens, /detect)
- New version of Python PIP

Python client (codestat_CLI.py)
- Collect files (names from command line)
- For each file, send file and collect statistics response
- Consolidate statistics responses
- Create report (LOC, SLOC, complexity; total by source code; grand total)

examiners
+ keyword comparison checks variety of keywords
- allow for mis-matched strings (" and ', or ' and ") only when string fails

generic
+ double dollar signs as block for Tex (Rmd)
+ comment types (cobol or fortran style)

generic ASM
- allow [:,] as ending for label
- allow space in args, comment only after marker (PDP-11)
- first item is label if colon, opcode if no colon (PDP-11, 8080, 8086)
- values on the left (listing) (xxxx xx xx xx or ooo.ooo ooo ooo ooo)

ASM-PDP-8

ASM-PDP-11

ASM-390

ASM-series-z

ASM-68000

ASM-8086 (16-bit, not x86)

ASM 6502
 - examples: http://textfiles.com/apple/ANATOMY/

ADA
+ Embedded SQL (EXEC ;)
+ tokenize EXEC block
+ numeric literals  base#number#  (2#1001# 10#25#)
* more source for ADA-95
* source for ADA-2005
* source for ADA-2012
+ labels enclosed in << >>

Awk

BASIC
- identify line numbers after THEN, GOTO, ON GOSUB, ON ERROR
- identify line numbers after GOSUB, ON GOTO

BASIC-80
- 4K version: extract keywords from text
- 8K version: extract keywords from front of text
- Disk version: keywords for files

BASICA / GW-BASIC
- do not extract keywords; AS and BASE are keywords

BBC BASIC
- line numbers or no line numbers
- operators [
  *, **, *|, #, ', %, &, ~, [,
  '*', '**', '*|', '#', '%', '~',
  '>>', '?', '!', ']', '|', '$', '$$',
  '>>>', '<<<',
  'AND', 'DIV', 'MOD', 'OR',
  'AND=', 'DIV=', 'MOD=', 'OR=',
  'NOT'
]
- unary operators [
  '?'. '!', ']', '|', '$', '$$', 'NOT', '+', '-'
]
- line continuation \
- prefix for variable @
- groupers () {}
- keywords [
  'BGET#', 'BPUT#',
  'CALL', 'CASE', 'CHAIN', 'CIRCLE', 'CLEAR', 'CLG', 'CLOSE#', 'CLS', 'COLOR',
  'COLOUR',
  'DATA', 'DEF', 'DIM', 'DRAW',
  'EDIT', 'ELLIPSE', 'ELSE', 'END', 'ENDCASE', 'ENDIF', 'ENDWHILE',
  'ENDPROC', 'ENVELOPE', 'ERROR', 'EVAL',
  'FILL', 'FOR',
  'GCOL', 'GOSUB', 'GOTO',
  'IF', 'INPUT', 'INPUT#',
  'LET', 'LINE', 'LOCAL',
  'MODE', 'MOUSE', 'MOVE',
  'NEXT',
  'OF', 'OPENIN', 'OPENOUT', 'OPENUP', 'OPT', 'ORIGIN', 'OSCLI', 'OTHERWISE',
  'PAGE', 'PLOT', 'POINT', 'PRINT', 'PRINT#', 'PROC', 'PTR#',
  'QUIT',
  'RECTANGLE', 'READ', 'READ#', 'REM', 'REPEAT', 'REPORT', 'RESTORE',
  'RETURN', 'RUN',
  'SOUND', 'STEP', 'STOP', 'SUM', 'SWAP', 'SYS',
  'THEN', 'TIME', 'TIME$', 'TO', 'TRACE',
  'UNTIL', 'USR',
  'VDU',
  'WHEN', 'WHILE', 'WIDTH'
]
- functions [
  'ABS',  'ASC', 'ATN', 'ACS', 'ADVAL', 'ASN',
  'CHR$', 'COS', 'COUNT',
  'DEG',
  'EXP', 'EOR', 'EOF#', 'EXT#',
  'GET', 'GET$',
  'HIMEM',
  'INKEY', 'INKEY$', 'INSTR', 'INT',
  'LEFT$', 'LEN', 'LN', 'LOG', 'LOMEM',
  'MID$',
  'POS',
  'RAD', 'RIGHT$', 'RND',
  'SGN', 'SIN', 'SPC', 'SQR', 'STR$', 'STRING$',
  'TAB', 'TAN', 'TINT', 'TOP',
  'VAL', 'VPOS'
]
- values [
  'ERL', 'ERR', 'FALSE', 'TRUE', 'OFF', 'ON', 'PI',
]
- variables '@%'
- long user function names

C
* C89 source (has void but not bool, // comment)
+ Embedded SQL (EXEC ;)
+ tokenize EXEC block
- c-decl.c moves to C++ data

C++:
+ Embedded SQL (EXEC ;)
+ tokenize EXEC block
+ backslash at end of line as line continuation (unwrap first?)
+ backslash at end of line in #directive continues (unwrap first?)
+ operator ... unary, postfix
+ raw strings R LR u8R uR UR with "abc()abc" with 'abc' as delimiter and paired but not nested () and possible " within () and may have trailing 's' and may contain newline
+ strings prefix u8 L u U
+ allow adjacent string literals
+ operators 'and', 'and_eq', 'bitand', 'bitor', 'compl', 'not', 'not_eq', 'or', 'or_eq', 'xor', 'xor_eq' ]
+ unary 'compl', 'not'
+ groupers '<%', '%>', '<:' not followed by ':', ':>', '%:', '%:%:'
+ operator '#', '##', '<=>', '<<=', '>>='

C#:
+ operator ..
+ unary operator ^
* 'calculator1' identifies as C++

CBASIC
+ colon as part of GRAPHIC PRINT statement

COBOL
+ tokenize EXEC block
- paragraph name is a single identifier followed by period
- expected keyword confidence assigns value
+ unclosed quoted strings on continuation extend to column 72
+ extensions: https://www.ibm.com/support/knowledgecenter/SS6SGM_5.1.0/com.ibm.cobol51.aix.doc/PGandLR/ref/rlext.html
* more tests from extra
+ Micro-Focus extensions (MF)
* source for COBOL-85, COBOL-74 Acucobol, IBM, GNU, MF extensions
+ keywords for GNU
- block comment *><[ to *><] (OpenCobol)
- combine LineCommentTokenBuilder with AssemblyCommentTokenBuilder
- fixed-format tokenizes AsteriskCommentTokenBuilder

CoffeeScript
- block comment ### / ###

D
- q {} token string, same as Perl Q string
- end text with 0x00 or 0x1a
- end of line \u2028 or \u2029

Dart

dBase II
- lines and strings continued when they end with ;
- derive TextBlockTokenBuilder from BlockTokenBuilder
- parse FMT files

dBase III

dBase IV
+ copy of dBase III
+ allow []
+ allow {}
+ keyword WINDOW ??? ACTIVATE MENU POPUP SCREEN ASSIST BEGIN END TRANSACTION BROWSE CALCULATE
+ keyword CANCEL CHANGE FILE INDEXES STRUCTURE EXTENDED MODIFY VIEW DEACTIVATE DEFINE BAR BOX PAD
+ keyword EXPORT FIND LOAD LOGOUT PLAY MACRO PRIVATE PROCEDURE PROTECT PUBLIC READ RECALL
+ keyword REINDEX RENAME REPLACE REPORT RESUME RETRY ROLLBACK RUN SCAN SEEK SHOW SKIP
+ keyword SUSPEND TOTAL TYPE UNLOCK ZAP
+ value null true false t f (no dots) (keep old dot values)
+ operator := . and or not (no dots) (keep old dot operators) ==
+ line comment with //
+ block comment /* */
+ lines start with keyword, assignment lines start with identifier and =
+ ? comments with &&
* more source

Clipper
+ copy of dBase IV
- https://en.wikibooks.org/wiki/Clipper_Tutorial:_a_Guide_to_Open_Source_Clipper(s)

Delphi
- = allows types on rhs
- combine into Pascal examiner

Dibol

Eiffel

Erlang
- numbers bbb#nnn
- numbers may contain _
- identifiers are 'atoms'
- things
is_atom/1
is_binary/1
is_bitstring/1
is_boolean/1
is_float/1
is_function/1
is_function/2
is_integer/1
is_list/1
is_map/1
is_number/1
is_pid/1
is_port/1
is_record/2
is_record/3
is_reference/1
is_tuple/1
abs(Number)
bit_size(Bitstring)
byte_size(Bitstring)
element(N, Tuple)
float(Term)
hd(List)
length(List)
map_get(Key, Map)
map_size(Map)
node()
node(Pid|Ref|Port)
round(Number)
self()
size(Tuple|Bitstring)
tl(List)
trunc(Number)
tuple_size(Tuple)

Fortran
- empty file has too high confidence
+ embedded SQL (EXEC newline)
+ tokenize EXEC block
* source for Fortran-2003
- FORMAT editing characters ( / // I Iw Iw.m F Fw.d E ES EN L Lw A Aw nX Tc / : r(...) BN BZ)

F sharp
* more source

Go
* more source

Haskell
- nested comments

HTML
+ combine adjacent text, whitespace, number, punctuation tokens into text
- faster, simpler checks for attribute

Java
- C++ class type tokens for generics (allow ? . , )

JavaScript
? 'values' detects as F# because single quote string isn't a string in F#

Julia
+ numbers may be followed by identifier
+ 'abstract' and 'primitive' must be followed by 'type' to be keyword
- r'' strings (no escapes)

Kotlin

Lua
+ strings contain any character
- multiline comments --[=[ --]=] with matching number of '=' signs (must be pair)

Matlab

Modula-2
- common functions [
      'ABS',
      'CHR', 'CMPLX',
      'DEC', 'DISPOSE',
      'EXCL',
      'FLOAT',
      'HALT', 'HIGH',
      'IN', 'INC', 'INCL', 'INT',
      'LENGTH', 'LFLOAT',
      'MAX', 'MIN',
      'NEW',
      'ODD', 'ORD',
      'RE',
      'SIZE',
      'TRUNC',
      'VAL',
      'WriteString', 'WriteCard', 'WriteLn', 'WriteReal'
]

Objective-C
- ... after value is operator
- if 'id' is the only thing that pushes code to Objective-C, then discount it

OCaml

Octave

Pascal
+ Embedded SQL (EXEC ;)
+ tokenize EXEC block
- stuffed quotes
- strings with double quotes (Turbo Pascal?)

Perl 5
- regex sometimes detected as division (grep?)
- s{}{}, tr{}{}, y{}{} allow () and [] ? new classes for {} regexes?
- s{}{} et al do not allow characters between groups
- __END__, __LINE__, __FILE__, __SUB__, __DATA__, __PACKAGE__
- heredoc (details?)
- qr// regex
- qw// (can use alternate delimiters)

Pick Basic
- may have editor line numbers or not (which are not BASIC line numbers)
- BASIC line numbers are optional
- statement separator ;
- variable names: alpha [alpha num .]*
- strings '' "" \\
- operator = : + - * / ^ > >= < <= # <> >< MATCHES
- comment * at start of line or after line number
- groupers ( ) , no [] no {}
- integer at start of line is line number
- constants in form PB_xxx

PL/I
- empty file has too high confidence
+ Embedded SQL (EXEC ;)
+ tokenize EXEC block
+ bit string constant is string with suffix B
- labels may be all digits (and colon)

PL/M
+ .B (and .W and .D ?)
- labels may be all digits (and colon)

Prolog
- empty file has too high confidence

Python
+ detab code
+ keywords: 'match', 'case'
+ 3.10: match
+ 3.9: @0
+ 3.8: :=
+ 3.7:? await
+ 3.6: 0_0 (underscore)
+ 3.5: @ operator
+ 3.3: yield from []

R
? 'basketball' has issues (no keywords, few tokens)

Raku
- copy of Perl 5
- no undef continue
- repeat loop given when default say try CATCH class has multi
- $!private $.public for class members
- ... ??? !!!
- < > replaces qw{}
- << >>
- no __ keywords
- keywords $?LINE $?FILE $?PACKAGE
- =begin END
- =begin DATA
- no ~= ->
- operator ~~ ~& +& ~| +| +< +<=
- unary operator :
- s/// and m// take parameters in colons before first /
- qr// replaced by rx// or regex{}


Ruby
+ tokenize regex (which may contain #{} expressions, which may contain '/' characters)
+ examiner seems to take a long time - profile it
- =begin =end
1
Rust

Scala
+ XML literals
- 'then' keyword

SQL
- source for PL/SQL

Swift

TypeScript
- 'require' (and maybe 'module') are functions, not keywords
-- or functions when followed by open parens

VB6
- check keywords at start of line or after 'Then' (and maybe ':') (unsplit lines?)
  (begintrans call circle clear close cls committrans compare data declare data defXXX dim else elseif end endif exit for if input input$ let open close pset put read redim rem restore set while wend write)

VB.NET
- 'Then' must be preceded on line by 'If' or 'ElseIf'

Wing
- keywords: bring, struct, public, enum, async, await, interface, inflight, return, class, private, static, protected, internal, while, for, if, continue, break, try, catch, static, resource, let, 
- groupers: { } ( ) ; : [ ]
- types: str, um, bool, void, nil, any, num
- operators: == != > < >= <= && || ! * / \ % + - ^ = ??
- unary: + - !
- strings: "" ``
- comments: // /* */
- identifiers: a-z A-Z 0-9 _ (? at end)
- common functions: throw, print, assert, panic

Stats and analysis
+ cyclomatic complexity
+ halstead complexity (can we calc for multiple functions or classes?)
+ boolexity

Multipart documents
+ Service to extract blocks and analyze each one
+ Markdown (text and code blocks)
+ Rmd (text, TeX, R)
+ HTML (JavaScript)
+ JCL with COBOL, FORTRAN, PL/1

Notes
- CodeStat analyzes and detects some languages but not all
- Tokenization is not perfect (C/C++ #define macros not expanded)
- A program that tokenizes may not compile
- A program that compiles may not tokenize
- Language detection is not perfect, especially with small fragments
- COBOL lines that start with '*' are considered comments (not true for later Cobol)
- Tokens in one language that are part of comments in another language can cause detection errors
