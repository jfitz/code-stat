[
    {
        "language":"c-78",
        "tokens":[
            {
                "type":"comment",
                "value":"/* Declarations for the parser for C and Objective-C.\r\n   Copyright (C) 1987-2019 Free Software Foundation, Inc.\r\n\r\n   Parser actions based on the old Bison parser; structure somewhat\r\n   influenced by and fragments based on the C++ parser.\r\n\r\nThis file is part of GCC.\r\n\r\nGCC is free software; you can redistribute it and/or modify it under\r\nthe terms of the GNU General Public License as published by the Free\r\nSoftware Foundation; either version 3, or (at your option) any later\r\nversion.\r\n\r\nGCC is distributed in the hope that it will be useful, but WITHOUT ANY\r\nWARRANTY; without even the implied warranty of MERCHANTABILITY or\r\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\nfor more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with GCC; see the file COPYING3.  If not see\r\n<http://www.gnu.org/licenses/>.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"preprocessor",
                "value":"#ifndef"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"GCC_C_PARSER_H"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"preprocessor",
                "value":"#define"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"GCC_C_PARSER_H"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* The C lexer intermediates between the lexer in cpplib and c-lex.c\r\n   and the C parser.  Unlike the C++ lexer, the parser structure\r\n   stores the lexer information instead of using a separate structure.\r\n   Identifiers are separated into ordinary identifiers, type names,\r\n   keywords and some other Objective-C types of identifiers, and some\r\n   look-ahead is maintained.\r\n\r\n   ??? It might be a good idea to lex the whole file up front (as for\r\n   C++).  It would then be possible to share more of the C and C++\r\n   lexer code, if desired.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* More information about the type of a CPP_NAME token.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_id_kind"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* An ordinary identifier.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_ID_ID"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* An identifier declared as a typedef name.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_ID_TYPENAME"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* An identifier declared as an Objective-C class name.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_ID_CLASSNAME"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* An address space identifier.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_ID_ADDRSPACE"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* Not an identifier.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_ID_NONE"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* A single C token after string literal concatenation and conversion\r\n   of preprocessing tokens to tokens.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"struct"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"GTY"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* The kind of token.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"ENUM_BITFIELD"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"cpp_ttype"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":":"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"number",
                "value":"8"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* If this token is a CPP_NAME, this value indicates whether also\r\n     declared as some kind of type.  Otherwise, it is C_ID_NONE.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"ENUM_BITFIELD"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_id_kind"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"id_kind"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":":"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"number",
                "value":"8"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* If this token is a keyword, this value indicates which keyword.\r\n     Otherwise, this value is RID_MAX.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"ENUM_BITFIELD"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"rid"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"keyword"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":":"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"number",
                "value":"8"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* If this token is a CPP_PRAGMA, this indicates the pragma that\r\n     was seen.  Otherwise it is PRAGMA_NONE.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"ENUM_BITFIELD"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"pragma_kind"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"pragma_kind"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":":"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"number",
                "value":"8"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* The location at which this token was found.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"location_t"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"location"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* The value associated with this token, if any.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"tree"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"value"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* Token flags.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"keyword",
                "value":"unsigned"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"char"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"flags"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"source_range"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"get_range"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"const"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"    "
            },
            {
                "type":"keyword",
                "value":"return"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"get_range_from_loc"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"line_table"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"location"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"location_t"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"get_finish"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"const"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"    "
            },
            {
                "type":"keyword",
                "value":"return"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"get_range"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"operator",
                "value":"."
            },
            {
                "type":"identifier",
                "value":"m_finish"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* The parser.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"struct"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* Possibly kinds of declarator to parse.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_dtr_syn"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* A normal declarator with an identifier.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_DTR_NORMAL"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* An abstract declarator (maybe empty).  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_DTR_ABSTRACT"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* A parameter declarator: may be either, but after a type name does\r\n     not redeclare a typedef name as an identifier if it can\r\n     alternatively be interpreted as a typedef name; see DR#009,\r\n     applied in C90 TC1, omitted from C99 and reapplied in C99 TC2\r\n     following DR#249.  For example, given a typedef T, \"int T\" and\r\n     \"int *T\" are valid parameter declarations redeclaring T, while\r\n     \"int (T)\" and \"int * (T)\" and \"int (T[])\" and \"int (T (int))\" are\r\n     abstract declarators rather than involving redundant parentheses;\r\n     the same applies with attributes inside the parentheses before\r\n     \"T\".  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_DTR_PARM"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* The binary operation precedence levels, where 0 is a dummy lowest level\r\n   used for the bottom of the stack.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_prec"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_NONE"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_LOGOR"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_LOGAND"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_BITOR"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_BITXOR"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_BITAND"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_EQ"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_REL"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_SHIFT"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_ADD"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_MULT"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"NUM_PRECS"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_lookahead_kind"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* Always treat unknown identifiers as typenames.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"cla_prefer_type"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* Could be parsing a nonabstract declarator.  Only treat an identifier\r\n     as a typename if followed by another identifier or a star.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"cla_nonabstract_decl"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* Never treat identifiers as typenames.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"cla_prefer_id"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_peek_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_peek_2nd_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_peek_nth_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"unsigned"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"int"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"n"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_require"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"cpp_ttype"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t      "
            },
            {
                "type":"keyword",
                "value":"const"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"char"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"msgid"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t      "
            },
            {
                "type":"identifier",
                "value":"location_t"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"matching_location"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"="
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"UNKNOWN_LOCATION"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t      "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type_is_unique"
            },
            {
                "type":"operator",
                "value":"="
            },
            {
                "type":"identifier",
                "value":"true"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_error"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"const"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"char"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"gmsgid"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"void"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_consume_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"void"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_skip_until_found"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"cpp_ttype"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t\t       "
            },
            {
                "type":"keyword",
                "value":"const"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"char"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"msgid"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t\t       "
            },
            {
                "type":"identifier",
                "value":"location_t"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"="
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"UNKNOWN_LOCATION"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_next_token_starts_declspecs"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_next_tokens_start_declaration"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token_starts_typename"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"token"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* Abstraction to avoid defining c_parser here which messes up gengtype\r\n   output wrt ObjC due to vec<c_token> routines being put in gtype-c.h\r\n   but not gtype-objc.h.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_tokens_buf"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"unsigned"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"n"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_error"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"void"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_set_error"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* A bit of a hack to have this here.  It would be better in a c-decl.h.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"old_style_parameter_scope"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"void"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* Return true if the next token from PARSER has the indicated\r\n   TYPE.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"static"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"inline"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"c_parser_next_token_is"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"cpp_ttype"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"keyword",
                "value":"return"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_peek_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"operator",
                "value":"->"
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"=="
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* Return true if the next token from PARSER does not have the\r\n   indicated TYPE.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"static"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"inline"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"c_parser_next_token_is_not"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"cpp_ttype"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"keyword",
                "value":"return"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"!"
            },
            {
                "type":"identifier",
                "value":"c_parser_next_token_is"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* Return true if the next token from PARSER is the indicated\r\n   KEYWORD.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"static"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"inline"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"c_parser_next_token_is_keyword"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"rid"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"keyword"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"keyword",
                "value":"return"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_peek_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"operator",
                "value":"->"
            },
            {
                "type":"identifier",
                "value":"keyword"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"=="
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"keyword"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"struct"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_declarator"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"c_parser_declarator"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type_seen_p"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_dtr_syn"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"kind"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t     "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"seen_id"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"void"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_declspecs"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"struct"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_declspecs"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t\t"
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_lookahead_kind"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"struct"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_type_name"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"c_parser_type_name"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"="
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"false"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"preprocessor",
                "value":"#endif"
            }
        ]
    },
    {
        "language":"c-89",
        "tokens":[
            {
                "type":"comment",
                "value":"/* Declarations for the parser for C and Objective-C.\r\n   Copyright (C) 1987-2019 Free Software Foundation, Inc.\r\n\r\n   Parser actions based on the old Bison parser; structure somewhat\r\n   influenced by and fragments based on the C++ parser.\r\n\r\nThis file is part of GCC.\r\n\r\nGCC is free software; you can redistribute it and/or modify it under\r\nthe terms of the GNU General Public License as published by the Free\r\nSoftware Foundation; either version 3, or (at your option) any later\r\nversion.\r\n\r\nGCC is distributed in the hope that it will be useful, but WITHOUT ANY\r\nWARRANTY; without even the implied warranty of MERCHANTABILITY or\r\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\nfor more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with GCC; see the file COPYING3.  If not see\r\n<http://www.gnu.org/licenses/>.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"preprocessor",
                "value":"#ifndef"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"GCC_C_PARSER_H"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"preprocessor",
                "value":"#define"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"GCC_C_PARSER_H"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* The C lexer intermediates between the lexer in cpplib and c-lex.c\r\n   and the C parser.  Unlike the C++ lexer, the parser structure\r\n   stores the lexer information instead of using a separate structure.\r\n   Identifiers are separated into ordinary identifiers, type names,\r\n   keywords and some other Objective-C types of identifiers, and some\r\n   look-ahead is maintained.\r\n\r\n   ??? It might be a good idea to lex the whole file up front (as for\r\n   C++).  It would then be possible to share more of the C and C++\r\n   lexer code, if desired.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* More information about the type of a CPP_NAME token.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_id_kind"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* An ordinary identifier.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_ID_ID"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* An identifier declared as a typedef name.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_ID_TYPENAME"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* An identifier declared as an Objective-C class name.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_ID_CLASSNAME"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* An address space identifier.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_ID_ADDRSPACE"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* Not an identifier.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_ID_NONE"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* A single C token after string literal concatenation and conversion\r\n   of preprocessing tokens to tokens.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"struct"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"GTY"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* The kind of token.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"ENUM_BITFIELD"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"cpp_ttype"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":":"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"number",
                "value":"8"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* If this token is a CPP_NAME, this value indicates whether also\r\n     declared as some kind of type.  Otherwise, it is C_ID_NONE.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"ENUM_BITFIELD"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_id_kind"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"id_kind"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":":"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"number",
                "value":"8"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* If this token is a keyword, this value indicates which keyword.\r\n     Otherwise, this value is RID_MAX.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"ENUM_BITFIELD"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"rid"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"keyword"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":":"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"number",
                "value":"8"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* If this token is a CPP_PRAGMA, this indicates the pragma that\r\n     was seen.  Otherwise it is PRAGMA_NONE.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"ENUM_BITFIELD"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"pragma_kind"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"pragma_kind"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":":"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"number",
                "value":"8"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* The location at which this token was found.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"location_t"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"location"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* The value associated with this token, if any.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"tree"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"value"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* Token flags.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"keyword",
                "value":"unsigned"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"char"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"flags"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"source_range"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"get_range"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"const"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"    "
            },
            {
                "type":"keyword",
                "value":"return"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"get_range_from_loc"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"line_table"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"location"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"location_t"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"get_finish"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"const"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"    "
            },
            {
                "type":"keyword",
                "value":"return"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"get_range"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"operator",
                "value":"."
            },
            {
                "type":"identifier",
                "value":"m_finish"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* The parser.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"struct"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* Possibly kinds of declarator to parse.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_dtr_syn"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* A normal declarator with an identifier.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_DTR_NORMAL"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* An abstract declarator (maybe empty).  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_DTR_ABSTRACT"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* A parameter declarator: may be either, but after a type name does\r\n     not redeclare a typedef name as an identifier if it can\r\n     alternatively be interpreted as a typedef name; see DR#009,\r\n     applied in C90 TC1, omitted from C99 and reapplied in C99 TC2\r\n     following DR#249.  For example, given a typedef T, \"int T\" and\r\n     \"int *T\" are valid parameter declarations redeclaring T, while\r\n     \"int (T)\" and \"int * (T)\" and \"int (T[])\" and \"int (T (int))\" are\r\n     abstract declarators rather than involving redundant parentheses;\r\n     the same applies with attributes inside the parentheses before\r\n     \"T\".  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_DTR_PARM"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* The binary operation precedence levels, where 0 is a dummy lowest level\r\n   used for the bottom of the stack.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_prec"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_NONE"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_LOGOR"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_LOGAND"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_BITOR"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_BITXOR"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_BITAND"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_EQ"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_REL"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_SHIFT"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_ADD"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_MULT"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"NUM_PRECS"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_lookahead_kind"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* Always treat unknown identifiers as typenames.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"cla_prefer_type"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* Could be parsing a nonabstract declarator.  Only treat an identifier\r\n     as a typename if followed by another identifier or a star.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"cla_nonabstract_decl"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* Never treat identifiers as typenames.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"cla_prefer_id"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_peek_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_peek_2nd_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_peek_nth_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"unsigned"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"int"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"n"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_require"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"cpp_ttype"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t      "
            },
            {
                "type":"keyword",
                "value":"const"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"char"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"msgid"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t      "
            },
            {
                "type":"identifier",
                "value":"location_t"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"matching_location"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"="
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"UNKNOWN_LOCATION"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t      "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type_is_unique"
            },
            {
                "type":"operator",
                "value":"="
            },
            {
                "type":"identifier",
                "value":"true"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_error"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"const"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"char"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"gmsgid"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"void"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_consume_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"void"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_skip_until_found"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"cpp_ttype"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t\t       "
            },
            {
                "type":"keyword",
                "value":"const"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"char"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"msgid"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t\t       "
            },
            {
                "type":"identifier",
                "value":"location_t"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"="
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"UNKNOWN_LOCATION"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_next_token_starts_declspecs"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_next_tokens_start_declaration"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token_starts_typename"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"token"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* Abstraction to avoid defining c_parser here which messes up gengtype\r\n   output wrt ObjC due to vec<c_token> routines being put in gtype-c.h\r\n   but not gtype-objc.h.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_tokens_buf"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"unsigned"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"n"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_error"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"void"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_set_error"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* A bit of a hack to have this here.  It would be better in a c-decl.h.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"old_style_parameter_scope"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"type",
                "value":"void"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* Return true if the next token from PARSER has the indicated\r\n   TYPE.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"static"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"inline"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"c_parser_next_token_is"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"cpp_ttype"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"keyword",
                "value":"return"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_peek_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"operator",
                "value":"->"
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"=="
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* Return true if the next token from PARSER does not have the\r\n   indicated TYPE.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"static"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"inline"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"c_parser_next_token_is_not"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"cpp_ttype"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"keyword",
                "value":"return"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"!"
            },
            {
                "type":"identifier",
                "value":"c_parser_next_token_is"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* Return true if the next token from PARSER is the indicated\r\n   KEYWORD.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"static"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"inline"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"c_parser_next_token_is_keyword"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"rid"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"keyword"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"keyword",
                "value":"return"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_peek_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"operator",
                "value":"->"
            },
            {
                "type":"identifier",
                "value":"keyword"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"=="
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"keyword"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"struct"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_declarator"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"c_parser_declarator"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type_seen_p"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_dtr_syn"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"kind"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t     "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"seen_id"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"void"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_declspecs"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"struct"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_declspecs"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t\t"
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_lookahead_kind"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"struct"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_type_name"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"c_parser_type_name"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"="
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"false"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"preprocessor",
                "value":"#endif"
            }
        ]
    },
    {
        "language":"c-99",
        "tokens":[
            {
                "type":"comment",
                "value":"/* Declarations for the parser for C and Objective-C.\r\n   Copyright (C) 1987-2019 Free Software Foundation, Inc.\r\n\r\n   Parser actions based on the old Bison parser; structure somewhat\r\n   influenced by and fragments based on the C++ parser.\r\n\r\nThis file is part of GCC.\r\n\r\nGCC is free software; you can redistribute it and/or modify it under\r\nthe terms of the GNU General Public License as published by the Free\r\nSoftware Foundation; either version 3, or (at your option) any later\r\nversion.\r\n\r\nGCC is distributed in the hope that it will be useful, but WITHOUT ANY\r\nWARRANTY; without even the implied warranty of MERCHANTABILITY or\r\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\nfor more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with GCC; see the file COPYING3.  If not see\r\n<http://www.gnu.org/licenses/>.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"preprocessor",
                "value":"#ifndef"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"GCC_C_PARSER_H"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"preprocessor",
                "value":"#define"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"GCC_C_PARSER_H"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* The C lexer intermediates between the lexer in cpplib and c-lex.c\r\n   and the C parser.  Unlike the C++ lexer, the parser structure\r\n   stores the lexer information instead of using a separate structure.\r\n   Identifiers are separated into ordinary identifiers, type names,\r\n   keywords and some other Objective-C types of identifiers, and some\r\n   look-ahead is maintained.\r\n\r\n   ??? It might be a good idea to lex the whole file up front (as for\r\n   C++).  It would then be possible to share more of the C and C++\r\n   lexer code, if desired.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* More information about the type of a CPP_NAME token.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_id_kind"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* An ordinary identifier.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_ID_ID"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* An identifier declared as a typedef name.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_ID_TYPENAME"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* An identifier declared as an Objective-C class name.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_ID_CLASSNAME"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* An address space identifier.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_ID_ADDRSPACE"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* Not an identifier.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_ID_NONE"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* A single C token after string literal concatenation and conversion\r\n   of preprocessing tokens to tokens.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"struct"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"GTY"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* The kind of token.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"ENUM_BITFIELD"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"cpp_ttype"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":":"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"number",
                "value":"8"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* If this token is a CPP_NAME, this value indicates whether also\r\n     declared as some kind of type.  Otherwise, it is C_ID_NONE.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"ENUM_BITFIELD"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_id_kind"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"id_kind"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":":"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"number",
                "value":"8"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* If this token is a keyword, this value indicates which keyword.\r\n     Otherwise, this value is RID_MAX.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"ENUM_BITFIELD"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"rid"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"keyword"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":":"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"number",
                "value":"8"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* If this token is a CPP_PRAGMA, this indicates the pragma that\r\n     was seen.  Otherwise it is PRAGMA_NONE.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"ENUM_BITFIELD"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"pragma_kind"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"pragma_kind"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":":"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"number",
                "value":"8"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* The location at which this token was found.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"location_t"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"location"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* The value associated with this token, if any.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"tree"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"value"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* Token flags.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"keyword",
                "value":"unsigned"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"char"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"flags"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"source_range"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"get_range"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"const"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"    "
            },
            {
                "type":"keyword",
                "value":"return"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"get_range_from_loc"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"line_table"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"location"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"location_t"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"get_finish"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"const"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"    "
            },
            {
                "type":"keyword",
                "value":"return"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"get_range"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"operator",
                "value":"."
            },
            {
                "type":"identifier",
                "value":"m_finish"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* The parser.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"struct"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* Possibly kinds of declarator to parse.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_dtr_syn"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* A normal declarator with an identifier.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_DTR_NORMAL"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* An abstract declarator (maybe empty).  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_DTR_ABSTRACT"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* A parameter declarator: may be either, but after a type name does\r\n     not redeclare a typedef name as an identifier if it can\r\n     alternatively be interpreted as a typedef name; see DR#009,\r\n     applied in C90 TC1, omitted from C99 and reapplied in C99 TC2\r\n     following DR#249.  For example, given a typedef T, \"int T\" and\r\n     \"int *T\" are valid parameter declarations redeclaring T, while\r\n     \"int (T)\" and \"int * (T)\" and \"int (T[])\" and \"int (T (int))\" are\r\n     abstract declarators rather than involving redundant parentheses;\r\n     the same applies with attributes inside the parentheses before\r\n     \"T\".  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"C_DTR_PARM"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* The binary operation precedence levels, where 0 is a dummy lowest level\r\n   used for the bottom of the stack.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_prec"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_NONE"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_LOGOR"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_LOGAND"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_BITOR"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_BITXOR"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_BITAND"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_EQ"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_REL"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_SHIFT"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_ADD"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"PREC_MULT"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"NUM_PRECS"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_lookahead_kind"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* Always treat unknown identifiers as typenames.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"cla_prefer_type"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* Could be parsing a nonabstract declarator.  Only treat an identifier\r\n     as a typename if followed by another identifier or a star.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"cla_nonabstract_decl"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"comment",
                "value":"/* Never treat identifiers as typenames.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"identifier",
                "value":"cla_prefer_id"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_peek_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_peek_2nd_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_peek_nth_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"unsigned"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"int"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"n"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_require"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"cpp_ttype"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t      "
            },
            {
                "type":"keyword",
                "value":"const"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"char"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"msgid"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t      "
            },
            {
                "type":"identifier",
                "value":"location_t"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"matching_location"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"="
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"UNKNOWN_LOCATION"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t      "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type_is_unique"
            },
            {
                "type":"operator",
                "value":"="
            },
            {
                "type":"value",
                "value":"true"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_error"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"const"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"char"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"gmsgid"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"void"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_consume_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"void"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_skip_until_found"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"cpp_ttype"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t\t       "
            },
            {
                "type":"keyword",
                "value":"const"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"char"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"msgid"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t\t       "
            },
            {
                "type":"identifier",
                "value":"location_t"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"="
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"UNKNOWN_LOCATION"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_next_token_starts_declspecs"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_next_tokens_start_declaration"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token_starts_typename"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"token"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* Abstraction to avoid defining c_parser here which messes up gengtype\r\n   output wrt ObjC due to vec<c_token> routines being put in gtype-c.h\r\n   but not gtype-objc.h.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_tokens_buf"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"unsigned"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"n"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_error"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"void"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_set_error"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* A bit of a hack to have this here.  It would be better in a c-decl.h.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"old_style_parameter_scope"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"type",
                "value":"void"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* Return true if the next token from PARSER has the indicated\r\n   TYPE.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"static"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"inline"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"c_parser_next_token_is"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"cpp_ttype"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"keyword",
                "value":"return"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_peek_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"operator",
                "value":"->"
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"=="
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* Return true if the next token from PARSER does not have the\r\n   indicated TYPE.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"static"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"inline"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"c_parser_next_token_is_not"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"cpp_ttype"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"keyword",
                "value":"return"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"!"
            },
            {
                "type":"identifier",
                "value":"c_parser_next_token_is"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"comment",
                "value":"/* Return true if the next token from PARSER is the indicated\r\n   KEYWORD.  */"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"static"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"inline"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"c_parser_next_token_is_keyword"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"rid"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"keyword"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"{"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"  "
            },
            {
                "type":"keyword",
                "value":"return"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_peek_token"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"operator",
                "value":"->"
            },
            {
                "type":"identifier",
                "value":"keyword"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"=="
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"keyword"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"group",
                "value":"}"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"struct"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_declarator"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"identifier",
                "value":"c_parser_declarator"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"parser"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"type_seen_p"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_dtr_syn"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"kind"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t     "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"seen_id"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"void"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_parser_declspecs"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"struct"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_declspecs"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"whitespace",
                "value":"\t\t\t\t"
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"enum"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_lookahead_kind"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"keyword",
                "value":"extern"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"keyword",
                "value":"struct"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"identifier",
                "value":"c_type_name"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"identifier",
                "value":"c_parser_type_name"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"group",
                "value":"("
            },
            {
                "type":"identifier",
                "value":"c_parser"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"*"
            },
            {
                "type":"group",
                "value":","
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"type",
                "value":"bool"
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"operator",
                "value":"="
            },
            {
                "type":"whitespace",
                "value":" "
            },
            {
                "type":"value",
                "value":"false"
            },
            {
                "type":"group",
                "value":")"
            },
            {
                "type":"statement terminator",
                "value":";"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"newline",
                "value":"\r\n"
            },
            {
                "type":"preprocessor",
                "value":"#endif"
            }
        ]
    }
]
