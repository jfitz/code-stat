[
    {
        "TYPE": "TOKEN",
        "INVALID": "\\"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "\\"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "#"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "#"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "\\"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "#"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "#"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "\\"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "\\"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "\\"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "#"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "#"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "\\"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "\\"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "\\"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "#"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "#"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "\\"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "#"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "#"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "\\"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "\\"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "\\"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "#"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "#"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "#"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "#"
    },
    {
        "TYPE": "TOKEN",
        "INVALID": "\\"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "\\"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "\\"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "#"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "#"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "\\"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "#"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "#"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "\\"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "\\"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "\\"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "#"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "#"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "\\"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "\\"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "\\"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "#"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "#"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "\\"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "#"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "#"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "\\"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "\\"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "\\"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "#"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "#"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "#"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "#"
    },
    {
        "TYPE": "OPERATOR",
        "INVALID": "\\"
    },
    {
        "TYPE": "OPERATOR",
        "FIRST": ".",
        "SECOND": "."
    },
    {
        "TYPE": "OPERATOR",
        "FIRST": ".",
        "SECOND": "."
    },
    {
        "TYPE": "OPERATOR",
        "FIRST": ".",
        "SECOND": "."
    },
    {
        "TYPE": "OPERATOR",
        "FIRST": ".",
        "SECOND": "."
    },
    {
        "TYPE": "OPERATOR",
        "FIRST": ">",
        "SECOND": ">"
    },
    {
        "TYPE": "OPERATOR",
        "FIRST": ">",
        "SECOND": ">"
    },
    {
        "TYPE": "OPERATOR",
        "FIRST": ",",
        "SECOND": "."
    },
    {
        "TYPE": "OPERATOR",
        "FIRST": ".",
        "SECOND": "."
    },
    {
        "TYPE": "OPERATOR",
        "FIRST": ".",
        "SECOND": "."
    },
    {
        "TYPE": "OPERATOR",
        "FIRST": "#define DECL_EXTERN_INLINE(DECL) (DECL_DECLARED_INLINE_P (DECL)  \\",
        "SECOND": "&&"
    },
    {
        "TYPE": "OPERATOR",
        "FIRST": ",",
        "SECOND": "."
    },
    {
        "TYPE": "OPERATOR",
        "FIRST": ".",
        "SECOND": "."
    },
    {
        "TYPE": "OPERATOR",
        "FIRST": ".",
        "SECOND": "."
    },
    {
        "TYPE": "OPERATOR",
        "FIRST": ">",
        "SECOND": ">"
    },
    {
        "TYPE": "OPERATOR",
        "FIRST": ">",
        "SECOND": ">"
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"%qD is static but used in inline function %qD \"",
        "SECOND": "\"which is not static\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"%q+D is static but declared in inline function %qD \"",
        "SECOND": "\"which is not static\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"type of array %q+D completed incompatibly with\"",
        "SECOND": "\" implicit initialization\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"using %qD as both a typedef and a tag is \"",
        "SECOND": "\"invalid in C++\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"a parameter list with an ellipsis \"",
        "SECOND": "\"cannot match an empty parameter name list declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"an argument type that has a default \"",
        "SECOND": "\"promotion cannot match an empty parameter name list \""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"promotion cannot match an empty parameter name list \"",
        "SECOND": "\"declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"prototype for %q+D declares more arguments \"",
        "SECOND": "\"than previous old-style definition\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"prototype for %q+D declares fewer arguments \"",
        "SECOND": "\"than previous old-style definition\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"prototype for %q+D declares argument %d\"",
        "SECOND": "\" with incompatible type\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"declaration of %q+D shadows \"",
        "SECOND": "\"a built-in function\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"conflicting types for built-in function %q+D; \"",
        "SECOND": "\"expected %qT\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"mismatch in argument %u type of built-in \"",
        "SECOND": "\"function %qD; expected %qT\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"mismatch in return type of built-in \"",
        "SECOND": "\"function %qD; expected %qT\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"conflicting named address spaces (generic vs %s) \"",
        "SECOND": "\"for %q+D\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"conflicting named address spaces (%s vs generic) \"",
        "SECOND": "\"for %q+D\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"conflicting named address spaces (%s vs %s) \"",
        "SECOND": "\"for %q+D\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"declaration of %qD shadows \"",
        "SECOND": "\"a built-in function\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"declaration of built-in function %qD without \"",
        "SECOND": "\"a prototype; expected %qT\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"static declaration of %q+D follows \"",
        "SECOND": "\"non-static declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"non-static declaration of %q+D follows \"",
        "SECOND": "\"static declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"non-static declaration of %q+D \"",
        "SECOND": "\"follows static declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"thread-local declaration of %q+D follows \"",
        "SECOND": "\"non-thread-local declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"non-thread-local declaration of %q+D follows \"",
        "SECOND": "\"thread-local declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"extern declaration of %q+D follows \"",
        "SECOND": "\"declaration with no linkage\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"non-static declaration of %q+D \"",
        "SECOND": "\"follows static declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"non-static declaration of %q+D follows \"",
        "SECOND": "\"static declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"static declaration of %q+D follows \"",
        "SECOND": "\"non-static declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"declaration of %q+D with no linkage follows \"",
        "SECOND": "\"extern declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"duplicate declaration of %qD is \"",
        "SECOND": "\"invalid in C++\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"redeclaration of %q+D with different visibility \"",
        "SECOND": "\"(old visibility preserved)\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"declaration of %q+D shadows previous \"",
        "SECOND": "\"non-variable\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"declaration of %qD shadows a global \"",
        "SECOND": "\"declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"declaration of %q+D shadows \"",
        "SECOND": "\"a built-in function\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"implicit declaration of function %qE;\"",
        "SECOND": "\" did you mean %qs?\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"incompatible implicit \"",
        "SECOND": "\"declaration of built-in \""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"declaration of built-in \"",
        "SECOND": "\"function %qD\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"incompatible implicit declaration of \"",
        "SECOND": "\"function %qD\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"%qE undeclared here (not in a function);\"",
        "SECOND": "\" did you mean %qs?\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"%qE undeclared (first use in this function);\"",
        "SECOND": "\" did you mean %qs?\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"each undeclared identifier is reported only\"",
        "SECOND": "\" once for each function it appears in\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"traditional C lacks a separate namespace \"",
        "SECOND": "\"for labels, identifier %qE conflicts\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"switch jumps into scope of identifier with \"",
        "SECOND": "\"variably modified type\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"empty declaration with storage class specifier \"",
        "SECOND": "\"does not redeclare tag\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"empty declaration with type qualifier \"",
        "SECOND": "\"does not redeclare tag\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"empty declaration with %<_Alignas%> \"",
        "SECOND": "\"does not redeclare tag\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"ISO C90 does not support %<static%> or type \"",
        "SECOND": "\"qualifiers in parameter array declarators\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"%<[*]%> not allowed in other than \"",
        "SECOND": "\"function prototype scope\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"ignoring %<asm%> specifier for non-static local \"",
        "SECOND": "\"variable %q+D\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"ISO C90 forbids array %qE whose size \"",
        "SECOND": "\"cannot be evaluated\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"ISO C90 forbids array \"",
        "SECOND": "\"whose size cannot be evaluated\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"ISO C90 forbids variable \"",
        "SECOND": "\"length array\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"type defaults to %<int%> in declaration \"",
        "SECOND": "\"of %qE\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"storage class specified for structure \"",
        "SECOND": "\"field %qE\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"function-scope %qE implicitly auto and declared \"",
        "SECOND": "\"%qs\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"declaration of type name as array of \"",
        "SECOND": "\"functions\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"size of unnamed array has incomplete \"",
        "SECOND": "\"type\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"ISO C90 does not \"",
        "SECOND": "\"support flexible array members\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"declaration of %qE as multidimensional \"",
        "SECOND": "\"array must have bounds for all dimensions \""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"array must have bounds for all dimensions \"",
        "SECOND": "\"except the first\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"declaration of multidimensional array \"",
        "SECOND": "\"must have bounds for all dimensions except \""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"must have bounds for all dimensions except \"",
        "SECOND": "\"the first\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"static or type qualifiers in non-parameter \"",
        "SECOND": "\"array declarator\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"%qE declared as function returning a \"",
        "SECOND": "\"function\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"type name declared as function \"",
        "SECOND": "\"returning a function\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"type name declared as function returning \"",
        "SECOND": "\"an array\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"function definition has qualified void \"",
        "SECOND": "\"return type\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"type qualifiers ignored on function \"",
        "SECOND": "\"return type\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"%<_Alignas%> specifiers cannot reduce \"",
        "SECOND": "\"alignment of %qE\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"%<_Alignas%> specifiers cannot reduce \"",
        "SECOND": "\"alignment of unnamed field\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"using %qD as both a typedef and a tag is \"",
        "SECOND": "\"invalid in C++\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"a member of a structure or union cannot \"",
        "SECOND": "\"have a variably modified type\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"ISO C90 does not \"",
        "SECOND": "\"support flexible array members\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"variable previously declared %<static%> \"",
        "SECOND": "\"redeclared %<extern%>\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"object with variably modified type must have \"",
        "SECOND": "\"no linkage\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"non-local variable %qD with anonymous type is \"",
        "SECOND": "\"questionable in C++\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"parameter names (without types) in \"",
        "SECOND": "\"function declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"%<%s %E%> declared inside parameter list\"",
        "SECOND": "\" will not be visible outside of this definition or\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\" will not be visible outside of this definition or\"",
        "SECOND": "\" declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"anonymous %s declared inside parameter list\"",
        "SECOND": "\" will not be visible outside of this definition or\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\" will not be visible outside of this definition or\"",
        "SECOND": "\" declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"enum type defined in struct or union \"",
        "SECOND": "\"is not visible in C++\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"struct defined in struct or union \"",
        "SECOND": "\"is not visible in C++\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"union defined in struct or union \"",
        "SECOND": "\"is not visible in C++\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"using %qD as both field and typedef name is \"",
        "SECOND": "\"invalid in C++\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"flexible array member in a struct with no named \"",
        "SECOND": "\"members\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"enumerator value for %qE is not an integer \"",
        "SECOND": "\"constant expression\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"%q+D defined as variadic function \"",
        "SECOND": "\"without prototype\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"old-style parameter declarations in prototyped \"",
        "SECOND": "\"function definition\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"number of arguments doesn%'t match \"",
        "SECOND": "\"built-in prototype\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"promoted argument %qD \"",
        "SECOND": "\"doesn%'t match built-in prototype\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"promoted argument %qD \"",
        "SECOND": "\"doesn%'t match prototype\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"argument %qD doesn%'t match \"",
        "SECOND": "\"built-in prototype\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"%<for%> loop initial declarations \"",
        "SECOND": "\"are only allowed in C99 or C11 mode\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"use option %<-std=c99%>, %<-std=gnu99%>, %<-std=c11%> or \"",
        "SECOND": "\"%<-std=gnu11%> to compile your code\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"ISO C90 does not support %<for%> loop \"",
        "SECOND": "\"initial declarations\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"declaration of static variable %qD in %<for%> loop \"",
        "SECOND": "\"initial declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"declaration of %<extern%> variable %qD in %<for%> loop \"",
        "SECOND": "\"initial declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"%<struct %E%> declared in %<for%> loop initial \"",
        "SECOND": "\"declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"%<enum %E%> declared in %<for%> loop \"",
        "SECOND": "\"initial declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"declaration of non-variable \"",
        "SECOND": "\"%qD in %<for%> loop initial declaration\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long long%> and %<double%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<short%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<__auto_type%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<void%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<__int%d%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<_Bool%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<char%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<float%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<_Float%d%s%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<_Decimal32%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<_Decimal64%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<_Decimal128%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<short%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<__auto_type%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<void%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<__int%d%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<_Bool%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<char%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<float%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<double%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<_Float%d%s%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<_Decimal32%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<_Decimal64%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<_Decimal128%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<unsigned%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<__auto_type%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<void%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<_Bool%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<float%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<double%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<_Float%d%s%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<_Decimal32%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<_Decimal64%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<_Decimal128%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<unsigned%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %<__auto_type%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %<void%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %<_Bool%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %<float%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %<double%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %<_Float%d%s%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %<_Decimal32%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %<_Decimal64%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %<_Decimal128%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<complex%> and %<__auto_type%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<complex%> and %<void%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<complex%> and %<_Bool%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<complex%> and %<_Decimal32%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<complex%> and %<_Decimal64%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<complex%> and %<_Decimal128%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<complex%> and %<_Fract%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<complex%> and %<_Accum%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<complex%> and %<_Sat%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<__int%d%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<__auto_type%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<void%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<_Bool%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<char%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<int%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<float%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<double%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<_Float%d%s%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<_Decimal32%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<_Decimal64%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<_Decimal128%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<complex%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<__auto_type%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<__auto_type%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<__auto_type%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %<__auto_type%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<complex%> and %<__auto_type%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<__auto_type%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<__int%d%> and %<long%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<__int%d%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<__int%d%> and %<short%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<void%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<void%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<void%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %<void%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<complex%> and %<void%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<void%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<_Bool%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<_Bool%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<_Bool%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %<_Bool%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<complex%> and %<_Bool%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<_Bool%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<char%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<char%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<char%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<int%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<float%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<float%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<float%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %<float%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<float%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long long%> and %<double%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<double%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<double%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %<double%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<double%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %<_Float%d%s%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %<_Float%d%s%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %<_Float%d%s%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %<_Float%d%s%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %<_Float%d%s%> in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long long%> and %qs in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<long%> and %qs in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<short%> and %qs in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<signed%> and %qs in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<unsigned%> and %qs in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<complex%> and %qs in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<_Sat%> and %qs in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"decimal floating point not supported \"",
        "SECOND": "\"for this target\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"both %<complex%> and %qs in \"",
        "SECOND": "\"declaration specifiers\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"ISO C does not support plain %<complex%> meaning \"",
        "SECOND": "\"%<double complex%>\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"%<#pragma omp declare reduction%> combiner refers to \"",
        "SECOND": "\"variable %qD which is not %<omp_out%> nor %<omp_in%>\""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"%<#pragma omp declare reduction%> initializer refers \"",
        "SECOND": "\"to variable %qD which is not %<omp_priv%> nor \""
    },
    {
        "TYPE": "OPERAND",
        "FIRST": "\"to variable %qD which is not %<omp_priv%> nor \"",
        "SECOND": "\"%<omp_orig%>\""
    }
]
