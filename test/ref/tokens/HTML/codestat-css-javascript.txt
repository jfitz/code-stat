{
    "value":[
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"HTML"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"head"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"script",
        "value":"\u003cscript type=\"text/javascript\"\u003e\r\n    function keysInObject(o) {\r\n      var keys = [];\r\n    \r\n      for (var key in o) {\r\n        keys.push(key);\r\n      }\r\n    \r\n      return keys;\r\n    }\r\n    \r\n    function sortedKeysInObject(o) {\r\n      var keys = keysInObject(o);\r\n      var sorted_keys = [];\r\n    \r\n      while (keys.length \u003e 0) {\r\n        var max_value = -1.0;\r\n        var max_index = -1;\r\n        for (var i = 0; i \u003c keys.length; i++) {\r\n          if (o[keys[i]] \u003e max_value) {\r\n            max_value = o[keys[i]];\r\n            max_index = i;\r\n          }\r\n        }\r\n        sorted_keys.push(keys[max_index]);\r\n        keys.splice(max_index, 1);\r\n      }\r\n    \r\n      return sorted_keys;\r\n    }\r\n    \r\n    function longestString(ss) {\r\n      var longest = \u0027\u0027;\r\n    \r\n      for (var i = 0; i \u003c ss.length; i++) {\r\n        if (ss[i].length \u003e longest.length) {\r\n          longest = ss[i];\r\n        }\r\n      }\r\n    \r\n      return longest;\r\n    }\r\n    \r\n    function buildConfidenceLine(name, confidence, width, decimals, nameLength) {\r\n        // format the name with trailing spaces\r\n        var numSpaces = nameLength - name.length + 1;\r\n        var spaces = \u0027 \u0027.repeat(numSpaces);\r\n        var nameBar = name + spaces;\r\n        // format the chart (stars) with trailing spaces\r\n        var gridConfidence = Math.round(confidence * width);\r\n        var gridStars = \u0027*\u0027.repeat(gridConfidence);\r\n        var gridSpaces = \u0027 \u0027.repeat(width - gridConfidence);\r\n        var gridBar = \u0027  [\u0027 + gridStars + gridSpaces + \u0027]\u0027;\r\n        var line = nameBar + confidence.toFixed(decimals) + gridBar;\r\n    \r\n        return line;\r\n    }\r\n    \r\n    function buildConfidenceGrid(confidences) {\r\n      var width = 20;\r\n      var decimals = 5;\r\n      var names = sortedKeysInObject(confidences);\r\n      var nameLength = longestString(names).length;\r\n    \r\n      var confidenceGridHtml = \u0027\u003ccode\u003e\u003cpre\u003e\u0027;\r\n    \r\n        // format the name with trailing spaces\r\n        for (var i = 0; i \u003c names.length; i++) {\r\n          var name = names[i];\r\n          var confidence = confidences[name];\r\n          var line = buildConfidenceLine(name, confidence, width, decimals, nameLength);\r\n          var htmlLine = line + \u0027\u003cbr/\u003e\u0027;\r\n    \r\n          confidenceGridHtml += htmlLine;\r\n        }\r\n    \r\n      confidenceGridHtml += \u0027\u003c/pre\u003e\u003c/code\u003e\u0027;\r\n    \r\n      return confidenceGridHtml;\r\n    }\r\n    \r\n    function keyWithGreatestValue(o) {\r\n      var greatestValueKey = o[0];\r\n      var greatestValue = 0.0;\r\n    \r\n      for (var key in o) {\r\n        if (o[key] \u003e greatestValue) {\r\n          greatestValueKey = key;\r\n          greatestValue = o[key];\r\n        }\r\n      }\r\n    \r\n      return greatestValueKey;\r\n    }\r\n    \r\n    function buildLanguageSelectOptions(languageSelect, names) {\r\n      while (languageSelect.firstChild) {\r\n        languageSelect.removeChild(languageSelect.firstChild);\r\n      }\r\n    \r\n      for (var i = 0; i \u003c names.length; i++) {\r\n        var option = document.createElement(\u0027option\u0027);\r\n        option.value = names[i];\r\n        option.textContent = names[i];\r\n        languageSelect.appendChild(option);\r\n      }\r\n    }\r\n    \r\n    function loadLanguageNames() {\r\n      var code = document.getElementById(\u0027code\u0027).value;\r\n      var req = new XMLHttpRequest();\r\n      req.open(\u0027GET\u0027, \u0027/languages\u0027, true);\r\n    \r\n      req.onload = function (e) {\r\n        if (req.readyState === 4) {\r\n          if (req.status === 200) {\r\n            var results = req.responseText;\r\n            var codesAndNames = JSON.parse(results);\r\n    \r\n            names = []\r\n            for (var code in codesAndNames) {\r\n              if (codesAndNames.hasOwnProperty(code) ) {\r\n                names.push(codesAndNames[code]);\r\n              }\r\n            }\r\n    \r\n            names.sort();\r\n    \r\n            // checkboxes for detect list\r\n            HTML = \u0027\u0027;\r\n    \r\n            for (i = 0; i \u003c names.length; i++) {\r\n              HTML += \u0027\u003cinput type=\"checkbox\"\u003e\u0027 + names[i] + \u0027\u003c/input\u003e\u003cbr/\u003e\u0027\r\n            }\r\n    \r\n            list_div = document.getElementById(\u0027detect_list\u0027);\r\n            list_div.innerHTML = HTML;\r\n    \r\n            // names for tokenize drop-down\r\n            var tokenizeLanguageSelect = document.getElementById(\u0027token_language\u0027);\r\n            buildLanguageSelectOptions(tokenizeLanguageSelect, names);\r\n    \r\n            // names for confidence drop-down\r\n            var confidenceLanguageSelect = document.getElementById(\u0027confidence_language\u0027);\r\n            buildLanguageSelectOptions(confidenceLanguageSelect, names);\r\n          }\r\n        }\r\n      }\r\n    \r\n      req.send()\r\n    }\r\n    \r\n    function detectLanguage() {\r\n        var results = \u0027\u0027;\r\n        var code = document.getElementById(\u0027code\u0027).value;\r\n        var req = new XMLHttpRequest();\r\n        req.open(\u0027POST\u0027, \u0027/detect\u0027, true);\r\n        req.setRequestHeader(\u0027Content-type\u0027, \u0027text/plain\u0027);\r\n    \r\n        req.onload = function (e) {\r\n          if (req.readyState === 4) {\r\n            if (req.status === 200) {\r\n              results = req.responseText;\r\n              var confidences = JSON.parse(results);\r\n              var names = keysInObject(confidences).sort();\r\n    \r\n              // build list of names\r\n              var tokenizeLanguageSelect = document.getElementById(\u0027token_language\u0027);\r\n              buildLanguageSelectOptions(tokenizeLanguageSelect, names)\r\n    \r\n              var confidenceLanguageSelect = document.getElementById(\u0027confidence_language\u0027);\r\n              buildLanguageSelectOptions(confidenceLanguageSelect, names)\r\n    \r\n              // build list of names and confidence values\r\n              var detectDiv = document.getElementById(\u0027detect_result\u0027);\r\n              var confidenceGridHtml = buildConfidenceGrid(confidences);\r\n              detectDiv.innerHTML = confidenceGridHtml;\r\n    \r\n              if (names.length \u003e 0) {\r\n                // find the most likely language\r\n                tokenizeLanguageSelect.value = keyWithGreatestValue(confidences)\r\n                confidenceLanguageSelect.value = keyWithGreatestValue(confidences)\r\n              }\r\n            } else {\r\n              console.error(req.statusText);\r\n            }\r\n          }\r\n        };\r\n    \r\n        req.onerror = function (e) {\r\n          console.error(req.statusText);\r\n        };\r\n    \r\n        req.send(code);\r\n    }\r\n    \r\n    function textToSafeHtml(str) {\r\n      var s1 = str.replace(/\u0026/g, \u0027\u0026amp;\u0027);\r\n      var s2 = s1.replace(/\u003c/g, \u0027\u0026lt;\u0027);\r\n      var s3 = s2.replace(/\u003e/g, \u0027\u0026gt;\u0027);\r\n      var s4 = s3.replace(/\"/g, \u0027\u0026quot;\u0027);\r\n      return s4;\r\n    }\r\n    \r\n    function colorize(token, htmlColors) {\r\n      var tokenType = token[\u0027type\u0027];\r\n      var tokenValue = token[\u0027value\u0027];\r\n      var tokenSafe = textToSafeHtml(tokenValue);\r\n      var tokenHtml = \u0027empty\u0027;\r\n    \r\n      if (tokenType == \u0027newline\u0027) {\r\n        tokenHtml = \u0027\u003cbr/\u003e\u0027; \r\n      } else if (tokenType.startsWith(\u0027invalid\u0027)) {\r\n        var frontHtml = \u0027\u003cfont color=red\u003e\u0027;\r\n        var backHtml = \u0027\u003c/font\u003e\u0027;\r\n        tokenHtml = frontHtml + tokenSafe + backHtml;\r\n      } else if (tokenType in htmlColors) {\r\n        var frontHtml = \u0027\u003cfont color=\u0027 + htmlColors[tokenType] + \u0027\u003e\u0027;\r\n        var backHtml = \u0027\u003c/font\u003e\u0027;\r\n        tokenHtml = frontHtml + tokenSafe + backHtml;\r\n      } else {\r\n        tokenHtml = tokenSafe;\r\n      }\r\n    \r\n      return tokenHtml;\r\n    }\r\n    \r\n    function formatCounts(counts) {\r\n      var html = \u0027\u0027\r\n    \r\n      var keys = [];\r\n      for (var key in counts) {\r\n        if (counts.hasOwnProperty(key)) {\r\n          keys.push(key);\r\n        }\r\n      }\r\n      var length = keys.length\r\n    \r\n      var total = 0\r\n      for (var i = 0; i \u003c length; i++) {\r\n        var key = keys[i];\r\n        var count = counts[key];\r\n        total += count\r\n        html += key + \u0027|\u0027 + count + \u0027\u003cbr/\u003e\u0027;\r\n      }\r\n      html += \u0027TOTAL\u0027 + \u0027|\u0027 + total + \u0027\u003cbr/\u003e\u0027;\r\n    \r\n      return html;\r\n    }\r\n    \r\n    function formatConfidence(confidences) {\r\n      var html = \u0027\u0027\r\n    \r\n      var keys = [];\r\n      for (var key in confidences) {\r\n        if (confidences.hasOwnProperty(key)) {\r\n          keys.push(key);\r\n        }\r\n      }\r\n      var length = keys.length\r\n    \r\n      for (var i = 0; i \u003c length; i++) {\r\n        var key = keys[i];\r\n        var count = confidences[key];\r\n        html += key + \u0027|\u0027 + count + \u0027\u003cbr/\u003e\u0027;\r\n      }\r\n    \r\n      return html;\r\n    }\r\n    \r\n    function showConfidence() {\r\n      var results = \u0027\u0027;\r\n      var code = document.getElementById(\u0027code\u0027).value;\r\n      var language = document.getElementById(\u0027confidence_language\u0027).value;\r\n      // change \u0027C++\u0027 because the \u0027+\u0027 character causes problems for requests\r\n      // TODO: escape the request to allow \u0027+\u0027\r\n      if (language == \u0027C++\u0027) {\r\n        language = \u0027Cpp\u0027;\r\n      }\r\n      if (language == \u0027C#\u0027) {\r\n        language = \u0027Csharp\u0027;\r\n      }\r\n    \r\n      var query = \u0027/confidence?language=\u0027 + language;\r\n      var req = new XMLHttpRequest();\r\n      req.open(\u0027POST\u0027, query, true);\r\n      req.setRequestHeader(\u0027Content-type\u0027, \u0027text/plain\u0027);\r\n      req.onload = function (e) {\r\n        if (req.readyState === 4) {\r\n          if (req.status === 200) {\r\n            var results = req.responseText;\r\n            var confidences = JSON.parse(results);\r\n            var length = confidences.length;\r\n    \r\n            var formattedConfidence = formatConfidence(confidences);\r\n    \r\n            var div_confidence = document.getElementById(\u0027confidence_result\u0027);\r\n            div_confidence.innerHTML = formattedConfidence;\r\n          } else {\r\n            // TODO: build a response\r\n            console.error(req.statusText);\r\n          }\r\n        }\r\n      };\r\n    \r\n      req.onerror = function (e) {\r\n        // TODO: build a response\r\n        console.error(req.statusText);\r\n      };\r\n    \r\n      req.send(code);\r\n    };\r\n    \r\n    function tokenize() {\r\n      var htmlColors = {\r\n        keyword: \u0027orchid\u0027,\r\n        number: \u0027blue\u0027,\r\n        string: \u0027salmon\u0027,\r\n        variable: \u0027steelblue\u0027,\r\n        symbol: \u0027purple\u0027,\r\n        operator: \u0027green\u0027,\r\n        group: \u0027green\u0027,\r\n        format: \u0027orange\u0027,\r\n        regex: \u0027orange\u0027,\r\n        comment: \u0027yellowgreen\u0027,\r\n        remark: \u0027yellowgreen\u0027,\r\n        picture: \u0027hotpink\u0027,\r\n        invalid: \u0027red\u0027,\r\n        directive: \u0027lightgreen\u0027,\r\n        preprocessor: \u0027lightgreen\u0027,\r\n        attribute: \u0027lightgreen\u0027,\r\n        \u0027line number\u0027: \u0027skyblue\u0027,\r\n        \u0027line identification\u0027: \u0027royalblue\u0027,\r\n        \u0027line continuation\u0027: \u0027goldenrod\u0027,\r\n        \u0027statement terminator\u0027: \u0027goldenrod\u0027,\r\n        \u0027statement separator\u0027: \u0027goldenrod\u0027,\r\n        \u0027doc marker\u0027: \u0027orchid\u0027,\r\n        \u0027here doc\u0027: \u0027hotpink\u0027,\r\n        \u0027exec block\u0027: \u0027crimson\u0027\r\n      };\r\n    \r\n      var results = \u0027\u0027;\r\n      var code = document.getElementById(\u0027code\u0027).value;\r\n      var language = document.getElementById(\u0027token_language\u0027).value;\r\n      // change \u0027C++\u0027 because the \u0027+\u0027 character causes problems for requests\r\n      // TODO: escape the request to allow \u0027+\u0027\r\n      if (language == \u0027C++\u0027) {\r\n        language = \u0027Cpp\u0027;\r\n      }\r\n      if (language == \u0027C#\u0027) {\r\n        language = \u0027Csharp\u0027;\r\n      }\r\n    \r\n      var query = \u0027/tokens?language=\u0027 + language;\r\n      var req = new XMLHttpRequest();\r\n      req.open(\u0027POST\u0027, query, true);\r\n      req.setRequestHeader(\u0027Content-type\u0027, \u0027text/plain\u0027);\r\n      req.onload = function (e) {\r\n        if (req.readyState === 4) {\r\n          if (req.status === 200) {\r\n            var results = req.responseText;\r\n            var tokens = JSON.parse(results);\r\n            var length = tokens.length;\r\n    \r\n            var counts = {};\r\n    \r\n            for (var i = 0; i \u003c length; i++) {\r\n              var token = tokens[i];\r\n              var ctype = token[\u0027type\u0027];\r\n              if (ctype in counts) {\r\n                counts[ctype] += 1;\r\n              } else {\r\n                counts[ctype] = 1;\r\n              }\r\n            }\r\n    \r\n            var formattedDetails = formatCounts(counts);\r\n    \r\n            var div_details = document.getElementById(\u0027tokens_details\u0027);\r\n            div_details.innerHTML = formattedDetails;\r\n    \r\n            var formattedResults = \u0027\u003ccode\u003e\u003cpre\u003e\u0027;\r\n    \r\n            for (var i = 0; i \u003c length; i++) {\r\n              var token = tokens[i];\r\n              formattedResults += colorize(token, htmlColors);\r\n            }\r\n    \r\n            formattedResults += \u0027\u003c/pre\u003e\u003c/code\u003e\u0027;\r\n    \r\n            var div_tokens = document.getElementById(\u0027tokens_result\u0027);\r\n            div_tokens.innerHTML = formattedResults;\r\n          } else {\r\n            // TODO: build a response\r\n            console.error(req.statusText);\r\n          }\r\n        }\r\n      };\r\n    \r\n      req.onerror = function (e) {\r\n        // TODO: build a response\r\n        console.error(req.statusText);\r\n      };\r\n    \r\n      req.send(code);\r\n    }\r\n    \u003c/script\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"head"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"body"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"onload"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"loadLanguageNames()\""
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"Welcome"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"to"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"the"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CodeStat"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"page"
    },
    {
        "type":"punctuation",
        "value":"!"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"id"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"code_input\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"style"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"border:1px solid black\""
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"textarea"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"style"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"width:100%;\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"rows"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"20\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"id"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"code\""
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"textarea"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"br"
    },
    {
        "type":"group",
        "value":"/\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"id"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"detect_input\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"style"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"border:1px solid black\""
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"id"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"detect_list\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"style"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"border:1px solid black\""
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"br"
    },
    {
        "type":"group",
        "value":"/\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"input"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"type"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"button\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"OnClick"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"detectLanguage();\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"Detect language\""
    },
    {
        "type":"group",
        "value":"/\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"br"
    },
    {
        "type":"group",
        "value":"/\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"id"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"tokenize_input\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"style"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"border:1px solid black\""
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"select"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"token_language\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"id"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"token_language\""
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"option"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"identifier",
        "value":"BASIC"
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"option"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"select"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"input"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"type"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"button\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"OnClick"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"tokenize();\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"Tokenize\""
    },
    {
        "type":"group",
        "value":"/\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"br"
    },
    {
        "type":"group",
        "value":"/\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"id"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"confidence_input\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"style"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"border:1px solid black\""
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"select"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"confidence_language\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"id"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"confidence_language\""
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"option"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"identifier",
        "value":"BASIC"
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"option"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"select"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"input"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"type"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"button\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"OnClick"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"showConfidence();\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"Confidence\""
    },
    {
        "type":"group",
        "value":"/\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"br"
    },
    {
        "type":"group",
        "value":"/\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"id"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"detect_result\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"style"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"border:1px solid black\""
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"br"
    },
    {
        "type":"group",
        "value":"/\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"id"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"confidence_result\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"style"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"border:1px solid black\""
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"br"
    },
    {
        "type":"group",
        "value":"/\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"id"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"tokens_details\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"style"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"border:1px solid black\""
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"br"
    },
    {
        "type":"group",
        "value":"/\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"id"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"tokens_result\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"style"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"string",
        "value":"\"border:1px solid black\""
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"div"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"body"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"\u003c/"
    },
    {
        "type":"keyword",
        "value":"HTML"
    },
    {
        "type":"group",
        "value":"\u003e"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    }
],
"Count":352
}
