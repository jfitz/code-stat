{
    "value":[
        {
            "type":"newline",
            "value":"\r\n"
        },
        {
            "type":"whitespace",
            "value":"                                                                         "
        },
        {
            "type":"comment",
            "value":"(*O/*_/\r\nCu  #%* )pop mark/CuG 4 def/# 2 def%%%%@@P[TX---P\\P_SXPY!Ex(mx2ex(\"SX!Ex4P)Ex=\r\nCuG #%*                                                                  *+Ex=\r\nCuG #%*------------------------------------------------------------------*+Ex=\r\nCuG #%*   POLYGLOT - a program in eight languages      15 February 1991  *+Ex=\r\nCuG #%*   10th Anniversary Edition                      1 December 2001  *+Ex=\r\nCuG #%*                                                                  *+Ex=\r\nCuG #%*   Written by Kevin Bungard, Peter Lisle, and Chris Tham          *+Ex=\r\nCuG #%*                                                                  *+Ex=\r\nCuG #%*   Polyglot suports the following languages:                      *+Ex=\r\nCuG #%*     1. COBOL (ANSI)                                              *+Ex=\r\nCuG #%*     2. Pascal (ISO)                                              *+Ex=\r\nCuG #%*     3. Fortran (ANSI, f77)                                       *+Ex=\r\nCuG #%*     4. C (ANSI-ish)                                              *+Ex=\r\nCuG #%*     5. PostScript                                                *+Ex=\r\nCuG #%*     6. Linux/Unix shell script (bash, sh, csh)                   *+Ex=\r\nCuG #%*     7. x86 machine language (MS-DOS, Win32, Linux)               *+Ex=\r\nCuG #%*     8. Perl (version 5)                                          *+Ex=\r\nCuG #%*                                                                  *+Ex=\r\nCuG #%*   Usage:                                                         *+Ex=\r\nCuG #%*     1. Rename this file to polyglot.[cob|pas|f77|c|ps|sh|com|pl] *+Ex=\r\nCuG #%*                                                                  *+Ex=\r\nCuG #%*     2. Compile and run with your favorite compiler and operating *+Ex=\r\nCuG #%*        system.                                                   *+Ex=\r\nCuG #%*                                                                  *+Ex=\r\nCuG #%*   Notes:                                                         *+Ex=\r\nCuG #%*     1. We have attempted to use only standard language features. *+Ex=\r\nCuG #%*                                                                  *+Ex=\r\nCuG #%*     2. Without the -traditional flag gcc will issue a warning.   *+Ex=\r\nCuG #%*                                                                  *+Ex=\r\nCuG #%*     3. When transferring from Unix to DOS make sure that a LF    *+Ex=\r\nCuG #%*        is correctly translated into a CR/LF.                     *+Ex=\r\nCuG #%*                                                                  *+Ex=\r\nCuG #%*     4. Keep the blank lines at the start of the program. They    *+Ex=\r\nCuG #%*        are important.                                            *+Ex=\r\nCuG #%*                                                                  *+Ex=\r\nCuG #%*     5. This text is a comment block in all eight languages.      *+Ex=\r\nCuG #%*                                                                  *+Ex=\r\nCuG #%*   Please mail any comments, corrections or additions to          *+Ex=\r\nCuG #%*   polyglot@ideology.com.au                                       *+Ex=\r\nCuG #%*                                                                  *+Ex=\r\nCuG #%*------------------------------------------------------------------*QuZ=\r\nCuG #%*                                                                  *+Ex=\r\nCuG #%*!Mx)ExQX5ZZ5SSP5n*5X!)Ex+ExPQXH,B+ExP[-9A-9B(g?(gA\u0027UTTER_XYZZXX!X *+\r\nCuG #(*                                                                  *(\r\nC   # */);                                                              /*(\r\nC   # *)"
        },
        {
            "type":"whitespace",
            "value":"  "
        },
        {
            "type":"keyword",
            "value":"program"
        },
        {
            "type":"whitespace",
            "value":"        "
        },
        {
            "type":"identifier",
            "value":"polyglot"
        },
        {
            "type":"whitespace",
            "value":" "
        },
        {
            "type":"group",
            "value":"("
        },
        {
            "type":"identifier",
            "value":"output"
        },
        {
            "type":"group",
            "value":")"
        },
        {
            "type":"statement separator",
            "value":";"
        },
        {
            "type":"whitespace",
            "value":"                             "
        },
        {
            "type":"comment",
            "value":"(*+\r\nC   #     identification division.\r\nC   #     program-id.    polyglot.\r\nC   #\r\nC   #     data           division.\r\nC   #     procedure      division.\r\nC   #\r\nC   # * ))cleartomark   /Bookman-Demi findfont 36 scalefont setfont     (\r\nC   # *                                                                 (\r\nC   #\r\nC   # *                  hello polyglots$\r\nC   #     main.\r\nC   #         perform\r\nC  /# * ) 2\u003e_$$; echo   \"hello polyglots\"; rm _$$; exit;\r\nC   # * (\r\nC   #\r\nC     *0 ) unless print \"hello polyglots\\n\"; __END__\r\n              print\r\nC             stop run.\r\n     -*,                \u0027hello polyglots\u0027\r\nC\r\nC         print.\r\nC             display   \"hello polyglots\".                              (\r\nC     */  int i;                                                        /*\r\nC     */  main () {                                                     /*\r\nC     */      i=printf (\"hello polyglots\\n\"); O= \u0026i; return *O;         /*\r\nC     *)"
        },
        {
            "type":"whitespace",
            "value":"                                                                "
        },
        {
            "type":"comment",
            "value":"(*\r\nC     *)"
        },
        {
            "type":"whitespace",
            "value":"  "
        },
        {
            "type":"keyword",
            "value":"begin"
        },
        {
            "type":"whitespace",
            "value":"                                                         "
        },
        {
            "type":"comment",
            "value":"(*\r\nC     *)"
        },
        {
            "type":"whitespace",
            "value":"      "
        },
        {
            "type":"identifier",
            "value":"writeln"
        },
        {
            "type":"whitespace",
            "value":"  "
        },
        {
            "type":"group",
            "value":"("
        },
        {
            "type":"string",
            "value":"\u0027hello polyglots\u0027"
        },
        {
            "type":"group",
            "value":")"
        },
        {
            "type":"statement separator",
            "value":";"
        },
        {
            "type":"whitespace",
            "value":"                             "
        },
        {
            "type":"comment",
            "value":"(*\r\nC     *)"
        },
        {
            "type":"whitespace",
            "value":"                                                                "
        },
        {
            "type":"comment",
            "value":"(* )\r\nC     * ) pop 60 360                                                    (\r\nC     * ) pop moveto    (hello polyglots) show                          (\r\nC     * ) pop showpage                                                  ((\r\nC     *)"
        },
        {
            "type":"newline",
            "value":"\r\n"
        },
        {
            "type":"whitespace",
            "value":"           "
        },
        {
            "type":"keyword",
            "value":"end"
        },
        {
            "type":"whitespace",
            "value":"                                                          "
        },
        {
            "type":"operator",
            "value":"."
        },
        {
            "type":"comment",
            "value":"(* )\r\nC)pop%     program       polyglot.                                      *)"
        },
        {
            "type":"comment",
            "value":"{*/}"
        }
    ],
    "Count":38
}
