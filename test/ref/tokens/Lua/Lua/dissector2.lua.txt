[
    {
        "type":"comment",
        "value":"--[[\r\n----------------------------------------\r\n script-name: dns_dissector.lua\r\n\r\n author: Hadriel Kaplan <hadrielk at yahoo dot com>\r\n Copyright (c) 2014, Hadriel Kaplan\r\n This code is in the Public Domain, or the BSD (3 clause) license if Public Domain does not apply\r\n in your country.\r\n\r\n Version: 2.1\r\n\r\n Changes since 2.0:\r\n   * fixed a bug with default settings\r\n   * added ability for command-line to overide defaults\r\n\r\n Changes since 1.0:\r\n   * made it use the new ProtoExpert class model for expert info\r\n   * add a protocol column with the proto name\r\n   * added heuristic dissector support\r\n   * added preferences settings\r\n   * removed byteArray2String(), and uses the new ByteArray:raw() method instead\r\n\r\n BACKGROUND:\r\n This is an example Lua script for a protocol dissector. The purpose of this script is two-fold:\r\n   * To provide a reference tutorial for others writing Wireshark dissectors in Lua\r\n   * To test various functions being called in various ways, so this script can be used in the test-suites\r\n I've tried to meet both of those goals, but it wasn't easy. No doubt some folks will wonder why some\r\n functions are called some way, or differently than previous invocations of the same function. I'm trying to\r\n to show both that it can be done numerous ways, but also I'm trying to test those numerous ways, and my more\r\n immediate need is for test coverage rather than tutorial guide. (the Lua API is sorely lacking in test scripts)\r\n\r\n OVERVIEW:\r\n This script creates an elementary dissector for DNS. It's neither comprehensive nor error-free with regards\r\n to the DNS protocol. That's OK. The goal isn't to fully dissect DNS properly - Wireshark already has a good\r\n DNS dissector built-in. We don't need another one. We also have other example Lua scripts, but I don't think\r\n they do a good job of explaining things, and the nice thing about this one is getting capture files to\r\n run it against is trivial. (plus I uploaded one)\r\n\r\n HOW TO RUN THIS SCRIPT:\r\n Wireshark and Tshark support multiple ways of loading Lua scripts: through a dofile() call in init.lua,\r\n through the file being in either the global or personal plugins directories, or via the command line.\r\n See the Wireshark USer's Guide chapter on Lua (http://www.wireshark.org/docs/wsug_html_chunked/wsluarm.html).\r\n Once the script is loaded, it creates a new protocol named \"MyDNS\" (or \"MYDNS\" in some places).  If you have\r\n a capture file with DNS packets in it, simply select one in the Packet List pane, right-click on it, and\r\n select \"Decode As ...\", and then in the dialog box that shows up scroll down the list of protocols to one\r\n called \"MYDNS\", select that and click the \"ok\" or \"apply\" button.  Voila`, you're now decoding DNS packets\r\n using the simplistic dissector in this script.  Another way is to download the capture file made for\r\n this script, and open that - since the DNS packets in it use UDP port 65333 (instead of the default 53),\r\n and since the MyDNS protocol in this script has been set to automatically decode UDP port 65333, it will\r\n automagically do it without doing \"Decode As ...\".\r\n\r\n----------------------------------------]]"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- do not modify this table"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"debug_level"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"DISABLED"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"LEVEL_1"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"LEVEL_2"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"--[[\r\n set this DEBUG to debug_level.LEVEL_1 to enable printing debug_level info\r\n set it to debug_level.LEVEL_2 to enable really verbose printing\r\n note: this will be overridden by user's preference settings\r\n ]]"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"DEBUG"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"debug_level"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"LEVEL_1"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"debug_level"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"DEBUG"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"port"
    },
    {
        "type":"whitespace",
        "value":"         "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"65333"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"heur_enabled"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"false"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- for testing purposes, we want to be able to pass in changes to the defaults"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- from the command line; because you can't set lua preferences from the command"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- line using the '-o' switch (the preferences don't exist until this script is"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- loaded, so the command line thinks they're invalid preferences being set)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- so we pass them in as command arguments insetad, and handle it here:"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"args"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"value",
        "value":"..."
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"-- get passed-in args"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"args"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"#"
    },
    {
        "type":"identifier",
        "value":"args"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"for"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"_"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"arg"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"in"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"ipairs"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"args"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"do"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"arg"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"match"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"(.+)=(.+)\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"tonumber"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"tonumber"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"elseif"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"=="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"true\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"or"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"=="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"TRUE\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"true"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"elseif"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"=="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"false\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"or"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"=="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"FALSE\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"false"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"elseif"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"=="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"DISABLED\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"debug_level"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"DISABLED"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"elseif"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"=="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"LEVEL_1\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"debug_level"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"LEVEL_1"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"elseif"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"=="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"LEVEL_2\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"debug_level"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"LEVEL_2"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"else"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"function",
        "value":"error"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"invalid commandline argument value\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"else"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"function",
        "value":"error"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"invalid commandline argument syntax\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"group",
        "value":"["
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"group",
        "value":"]"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"value"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"dprint"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"function"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"dprint2"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"function"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"function"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"reset_debug_level"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"debug_level"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"debug_level"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"DISABLED"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"identifier",
        "value":"dprint"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"function"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"value",
        "value":"..."
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"function",
        "value":"print"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"table"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"concat"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"string",
        "value":"\"Lua:\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"..."
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"string",
        "value":"\" \""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"debug_level"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"debug_level"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"LEVEL_1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"dprint2"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"dprint"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- call it now"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"function",
        "value":"reset_debug_level"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"function",
        "value":"dprint2"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Wireshark version = \""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"get_version"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"function",
        "value":"dprint2"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Lua version = \""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"_VERSION"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"----------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- Unfortunately, the older Wireshark/Tshark versions have bugs, and part of the point"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- of this script is to test those bugs are now fixed.  So we need to check the version"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- end error out if it's too old."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"major"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"minor"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"micro"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"get_version"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"match"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"(%d+)%.(%d+)%.(%d+)\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"major"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"tonumber"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"major"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"<="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"function",
        "value":"tonumber"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"minor"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"<="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"10"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"or"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"function",
        "value":"tonumber"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"minor"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"=="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"11"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"tonumber"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"micro"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"<"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"3"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"function",
        "value":"error"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"string",
        "value":"\"Sorry, but your Wireshark/Tshark version (\""
    },
    {
        "type":"operator",
        "value":".."
    },
    {
        "type":"function",
        "value":"get_version"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":".."
    },
    {
        "type":"string",
        "value":"\") is too old for this script!\\n\""
    },
    {
        "type":"operator",
        "value":".."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"string",
        "value":"\"This script needs Wireshark/Tshark version 1.11.3 or higher.\\n\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- more sanity checking"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- verify we have the ProtoExpert class in wireshark, as that's the newest thing this file uses"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"function",
        "value":"assert"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"ProtoExpert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"new"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Wireshark does not have the ProtoExpert class, so it's too old - get the latest 1.11.3 or higher\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"----------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"----------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- creates a Proto object, but doesn't register it yet"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"Proto"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"string",
        "value":"\"MyDNS Protocol\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"----------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- multiple ways to do the same thing: create a protocol field (but not register it yet)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- the abbreviation should always have \"<myproto>.\" before the specific abbreviation, to avoid collisions"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_trasaction_id"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"whitespace",
        "value":"   "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Transaction ID\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"mydns.trans_id\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ftypes"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"UINT16"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flags"
    },
    {
        "type":"whitespace",
        "value":"              "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"whitespace",
        "value":"   "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Flags\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"mydns.flags\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ftypes"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"UINT16"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"nil"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"base"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"HEX"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_num_questions"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"uint16"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.num_questions\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Number of Questions\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_num_answers"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"uint16"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.num_answers\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Number of Answer RRs\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_num_authority_rr"
    },
    {
        "type":"whitespace",
        "value":"   "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"uint16"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.num_authority_rr\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Number of Authority RRs\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_num_additional_rr"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"uint16"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.num_additional_rr\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Number of Additional RRs\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- within the flags field, we want to parse/show the bits separately"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- note the \"base\" argument becomes the size of the bitmask'ed field when ftypes.BOOLEAN is used"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- the \"mask\" argument is which bits we want to use for this field (e.g., base=16 and mask=0x8000 means we want the top bit of a 16-bit field)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- again the following shows different ways of doing the same thing basically"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_response"
    },
    {
        "type":"whitespace",
        "value":"              "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"whitespace",
        "value":"   "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Response\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"mydns.flags.response\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ftypes"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"BOOLEAN"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"string",
        "value":"\"this is a response\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"string",
        "value":"\"this is a query\""
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"16"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0x8000"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"is the message a response?\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_opcode"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"whitespace",
        "value":"   "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Opcode\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"mydns.flags.opcode\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ftypes"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"UINT16"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"nil"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"base"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"DEC"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0x7800"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"operation code\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_authoritative"
    },
    {
        "type":"whitespace",
        "value":"         "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"whitespace",
        "value":"   "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Authoritative\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"mydns.flags.authoritative\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ftypes"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"BOOLEAN"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"nil"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"16"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0x0400"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"is the response authoritative?\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_truncated"
    },
    {
        "type":"whitespace",
        "value":"             "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"bool"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.flags.truncated\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Truncated\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"16"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"nil"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0x0200"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"is the message truncated?\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_recursion_desired"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"bool"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.flags.recursion_desired\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Recursion desired\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"16"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"string",
        "value":"\"yes\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"string",
        "value":"\"no\""
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0x0100"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"do the query recursivley?\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_recursion_available"
    },
    {
        "type":"whitespace",
        "value":"   "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"bool"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.flags.recursion_available\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Recursion available\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"16"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"nil"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0x0080"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"does the server support recursion?\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_z"
    },
    {
        "type":"whitespace",
        "value":"                     "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"uint16"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.flags.z\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"World War Z - Reserved for future use\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"base"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"HEX"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"nil"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0x0040"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"when is it the future?\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_authenticated"
    },
    {
        "type":"whitespace",
        "value":"         "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"bool"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.flags.authenticated\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Authenticated\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"16"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"string",
        "value":"\"yes\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"string",
        "value":"\"no\""
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0x0020"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"did the server DNSSEC authenticate?\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_checking_disabled"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"bool"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.flags.checking_disabled\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Checking disabled\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"16"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"nil"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0x0010"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- no, these aren't all the DNS response codes - this is just an example"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"rcodes"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"group",
        "value":"["
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"group",
        "value":"]"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"No Error\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"group",
        "value":"["
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"group",
        "value":"]"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Format Error\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"group",
        "value":"["
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":"]"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Server Failure\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"group",
        "value":"["
    },
    {
        "type":"number",
        "value":"3"
    },
    {
        "type":"group",
        "value":"]"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Non-Existent Domain\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"group",
        "value":"["
    },
    {
        "type":"number",
        "value":"9"
    },
    {
        "type":"group",
        "value":"]"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Server Not Authoritative for zone\""
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- the above rcodes table is used in this next ProtoField"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_rcode"
    },
    {
        "type":"whitespace",
        "value":"         "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"uint16"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.flags.rcode\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Response code\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"base"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"DEC"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"rcodes"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0x000F"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_query"
    },
    {
        "type":"whitespace",
        "value":"              "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Query\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"mydns.query\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ftypes"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"BYTES"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_query_name"
    },
    {
        "type":"whitespace",
        "value":"         "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Name\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"mydns.query.name\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ftypes"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"STRING"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_query_name_len"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Name Length\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"mydns.query.name.len\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ftypes"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"UINT8"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_query_label_count"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Label Count\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"mydns.query.label.count\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ftypes"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"UINT8"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"rrtypes"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"["
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"group",
        "value":"]"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"A (IPv4 host address)\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"["
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":"]"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"NS (authoritative name server)\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"["
    },
    {
        "type":"number",
        "value":"28"
    },
    {
        "type":"group",
        "value":"]"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"AAAA (for geeks only)\""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_query_type"
    },
    {
        "type":"whitespace",
        "value":"         "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"uint16"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.query.type\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Type\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"base"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"DEC"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"rrtypes"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- again, not all class types are listed here"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"classes"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"group",
        "value":"["
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"group",
        "value":"]"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Reserved\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"group",
        "value":"["
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"group",
        "value":"]"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"IN (Internet)\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"group",
        "value":"["
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":"]"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"The 1%\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"group",
        "value":"["
    },
    {
        "type":"number",
        "value":"5"
    },
    {
        "type":"group",
        "value":"]"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"First class\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"group",
        "value":"["
    },
    {
        "type":"number",
        "value":"6"
    },
    {
        "type":"group",
        "value":"]"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Business class\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"group",
        "value":"["
    },
    {
        "type":"number",
        "value":"65535"
    },
    {
        "type":"group",
        "value":"]"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Cattle class\""
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_query_class"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoField"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"uint16"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.query.class\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Class\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"base"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"DEC"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"classes"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"nil"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"keep it classy folks\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"----------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- this actually registers the ProtoFields above, into our new Protocol"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- in a real script I wouldn't do it this way; I'd build a table of fields programmatically"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- and then set dns.fields to it, so as to avoid forgetting a field"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"fields"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_trasaction_id"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flags"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"pf_num_questions"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_num_answers"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_num_authority_rr"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_num_additional_rr"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"pf_flag_response"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_opcode"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_authoritative"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"pf_flag_truncated"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_recursion_desired"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_recursion_available"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"pf_flag_z"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_authenticated"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_checking_disabled"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_flag_rcode"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"pf_query"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_query_name"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_query_name_len"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_query_label_count"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_query_type"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pf_query_class"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"----------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- create some expert info fields (this is new functionality in 1.11.3)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- Expert info fields are very similar to proto fields: they're tied to our protocol,"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- they're created in a similar way, and registered by setting a 'experts' field to"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- a table of them just as proto fields were put into the 'dns.fields' above"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- The old way of creating expert info was to just add it to the tree, but that"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- didn't let the expert info be filterable in wireshark, whereas this way does"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ef_query"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoExpert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.query.expert\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"DNS query message\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                                     "
    },
    {
        "type":"identifier",
        "value":"expert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"group"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"REQUEST_CODE"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"expert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"severity"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"CHAT"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ef_response"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoExpert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.response.expert\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"DNS response message\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                                     "
    },
    {
        "type":"identifier",
        "value":"expert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"group"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"RESPONSE_CODE"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"expert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"severity"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"CHAT"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ef_ultimate"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoExpert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.response.ultimate.expert\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"DNS answer to life, the universe, and everything\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                                     "
    },
    {
        "type":"identifier",
        "value":"expert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"group"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"COMMENTS_GROUP"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"expert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"severity"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"NOTE"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- some error expert info's"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ef_too_short"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoExpert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.too_short.expert\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"DNS message too short\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                                     "
    },
    {
        "type":"identifier",
        "value":"expert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"group"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"MALFORMED"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"expert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"severity"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"ERROR"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ef_bad_query"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProtoExpert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.query.missing.expert\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"DNS query missing or malformed\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                                     "
    },
    {
        "type":"identifier",
        "value":"expert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"group"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"MALFORMED"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"expert"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"severity"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"WARN"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- register them"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"experts"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ef_query"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ef_too_short"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ef_bad_query"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ef_response"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ef_ultimate"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"----------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- we don't just want to display our protocol's fields, we want to access the value of some of them too!"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- There are several ways to do that.  One is to just parse the buffer contents in Lua code to find"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- the values.  But since ProtoFields actually do the parsing for us, and can be retrieved using Field"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- objects, it's kinda cool to do it that way. So let's create some Fields to extract the values."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- The following creates the Field objects, but they're not 'registered' until after this script is loaded."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- Also, these lines can't be before the 'dns.fields = ...' line above, because the Field.new() here is"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- referencing fields we're creating, and they're not \"created\" until that line above."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- Furthermore, you cannot put these 'Field.new()' lines inside the dissector function."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- Before Wireshark version 1.11, you couldn't even do this concept (of using fields you just created)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"questions_field"
    },
    {
        "type":"whitespace",
        "value":"       "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"Field"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.num_questions\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"query_type_field"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"Field"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.query.type\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"query_class_field"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"Field"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.query.class\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"response_field"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"Field"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"new"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"mydns.flags.response\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- here's a little helper function to access the response_field value later."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- Like any Field retrieval, you can't retrieve a field's value until its value has been"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- set, which won't happen until we actually use our ProtoFields in TreeItem:add() calls."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- So this isResponse() function can't be used until after the pf_flag_response ProtoField"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- has been used inside the dissector."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- Note that calling the Field object returns a FieldInfo object, and calling that"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- returns the value of the field - in this case a boolean true/false, since we set the"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- \"mydns.flags.response\" ProtoField to ftype.BOOLEAN way earlier when we created the"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- pf_flag_response ProtoField.  Clear as mud?"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"--"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- A shorter version of this function would be:"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- local function isResponse() return response_field()() end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- but I though the below is easier to understand."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"function"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"isResponse"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"response_fieldinfo"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"response_field"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"response_fieldinfo"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"--------------------------------------------------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- preferences handling stuff"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"--------------------------------------------------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- a \"enum\" table for our enum pref, as required by Pref.enum()"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- having the \"index\" number makes ZERO sense, and is completely illogical"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- but it's what the code has expected it to be for a long time. Ugh."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"debug_pref_enum"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"string",
        "value":"\"Disabled\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"debug_level"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"DISABLED"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"string",
        "value":"\"Level 1\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"debug_level"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"LEVEL_1"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"group",
        "value":"{"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"3"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"string",
        "value":"\"Level 2\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"debug_level"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"LEVEL_2"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"group",
        "value":"}"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"prefs"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"debug"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"Pref"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"enum"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Debug\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"debug_level"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                            "
    },
    {
        "type":"string",
        "value":"\"The debug printing level\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"debug_pref_enum"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"prefs"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"port"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"Pref"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"uint"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Port number\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"port"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                            "
    },
    {
        "type":"string",
        "value":"\"The UDP port number for MyDNS\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"prefs"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"heur"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"Pref"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"bool"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Heuristic enabled\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"heur_enabled"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                            "
    },
    {
        "type":"string",
        "value":"\"Whether heuristic dissection is enabled or not\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"----------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- a function for handling prefs being changed"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"function"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"prefs_changed"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"function",
        "value":"dprint2"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"prefs_changed called\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"debug_level"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"prefs"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"debug"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"function",
        "value":"reset_debug_level"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"heur_enabled"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"prefs"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"heur"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"port"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"~="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"prefs"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"port"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- remove old one, if not 0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"port"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"~="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"function",
        "value":"dprint2"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"removing MyDNS from port\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"port"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"DissectorTable"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"get"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"udp.port\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"remove"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"port"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- set our new default"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"port"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"prefs"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"port"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- add new one, if not 0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"port"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"~="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"function",
        "value":"dprint2"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"adding MyDNS to port\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"port"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"DissectorTable"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"get"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"udp.port\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"port"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"function",
        "value":"dprint2"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"MyDNS Prefs registered\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"----------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"---- some constants for later use ----"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- the DNS header size"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"DNS_HDR_LEN"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"12"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- the smallest possible DNS query field size"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- has to be at least a label length octet, label character, label null terminator, 2-bytes type and 2-bytes class"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"MIN_QUERY_LEN"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"7"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"----------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- some forward \"declarations\" of helper functions we use in the dissector"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- I don't usually use this trick, but it'll help reading/grok'ing this script I think"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- if we don't focus on them."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"getQueryName"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"----------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- The following creates the callback function for the dissector."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- It's the same as doing \"dns.dissector = function (tvbuf,pkt,root)\""
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- The 'tvbuf' is a Tvb object, 'pktinfo' is a Pinfo object, and 'root' is a TreeItem object."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- Whenever Wireshark dissects a packet that our Proto is hooked into, it will call"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- this function and pass it these arguments for the packet it's dissecting."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"function"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"dissector"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"pktinfo"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"root"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"function",
        "value":"dprint2"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"dns.dissector called\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- set the protocol column to show our protocol name"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"pktinfo"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"cols"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"protocol"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"set"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"MYDNS\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- We want to check that the packet size is rational during dissection, so let's get the length of the"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- packet buffer (Tvb)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- Because DNS has no additional payload data other than itself, and it rides on UDP without padding,"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- we can use tvb:len() or tvb:reported_len() here; but I prefer tvb:reported_length_remaining() as it's safer."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pktlen"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"reported_length_remaining"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- We start by adding our protocol to the dissection display tree."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- A call to tree:add() returns the child created, so we can add more \"under\" it using that return value."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- The second argument is how much of the buffer/packet this added tree item covers/represents - in this"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- case (DNS protocol) that's the remainder of the packet."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tree"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"root"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"pktlen"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- now let's check it's not too short"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pktlen"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"<"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"DNS_HDR_LEN"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- since we're going to add this protocol to a specific UDP port, we're going to"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- assume packets in this port are our protocol, so the packet being too short is an error"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- the old way: tree:add_expert_info(PI_MALFORMED, PI_ERROR, \"packet too short\")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- the correct way now:"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"identifier",
        "value":"tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add_proto_expert_info"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"ef_too_short"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"function",
        "value":"dprint"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"packet length\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"pktlen"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"string",
        "value":"\"too short\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- Now let's add our transaction id under our dns protocol tree we just created."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- The transaction id starts at offset 0, for 2 bytes length."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_trasaction_id"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- We'd like to put the transaction id number in the GUI row for this packet, in its"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- INFO column/cell.  First we need the transaction id value, though.  Since we just"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- dissected it with the previous code line, we could now get it using a Field's"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- FieldInfo extractor, but instead we'll get it directly from the TvbRange just"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- to show how to do that.  We'll use Field/FieldInfo extractors later on..."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"transid"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"uint"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"pktinfo"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"cols"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"info"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"set"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"(\""
    },
    {
        "type":"operator",
        "value":".."
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"transid"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":".."
    },
    {
        "type":"string",
        "value":"\")\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- now let's add the flags, which are all in the packet bytes at offset 2 of length 2"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- instead of calling this again and again, let's just use a variable"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"flagrange"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- for our flags field, we want a sub-tree"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"flag_tree"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_flags"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"flagrange"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- I'm indenting this for clarity, because it's adding to the flag's child-tree"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- let's add the type of message (query vs. response)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"query_flag_tree"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"flag_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_flag_response"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"flagrange"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- let's also add an expert info about it"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"isResponse"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"query_flag_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add_proto_expert_info"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"ef_response"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"It's a response!\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"transid"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"=="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"42"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"identifier",
        "value":"tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add_tvb_expert_info"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"ef_ultimate"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"else"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"query_flag_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add_proto_expert_info"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"ef_query"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- we now know if it's a response or query, so let's put that in the"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- GUI packet row, in the INFO column cell"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- this line of code uses a Lua trick for doing something similar to"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- the C/C++ 'test ? true : false' shorthand"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"identifier",
        "value":"pktinfo"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"cols"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"info"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"prepend"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"function",
        "value":"isResponse"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Response \""
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"or"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"Query \""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"identifier",
        "value":"flag_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_flag_opcode"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"flagrange"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"isResponse"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"flag_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_flag_authoritative"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"flagrange"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"identifier",
        "value":"flag_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_flag_truncated"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"flagrange"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"isResponse"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"flag_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_flag_recursion_available"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"flagrange"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"else"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"flag_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_flag_recursion_desired"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"flagrange"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"identifier",
        "value":"flag_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_flag_z"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"flagrange"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"isResponse"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"flag_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_flag_authenticated"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"flagrange"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"flag_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_flag_rcode"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"flagrange"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"identifier",
        "value":"flag_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_flag_checking_disabled"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"flagrange"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- now add more to the main mydns tree"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_num_questions"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"4"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_num_answers"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"6"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- another way to get a TvbRange is just to call the Tvb like this"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_num_authority_rr"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"tvbuf"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"8"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- or if we're crazy, we can create a sub-TvbRange, from a sub-TvbRange of the TvbRange"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_num_additional_rr"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"10"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"num_queries"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"questions_field"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"DNS_HDR_LEN"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"num_queries"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- let's create a sub-tree, using a plain text description (not a field from the packet)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"queries_tree"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Queries\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pktlen_remaining"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pktlen"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"while"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"num_queries"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pktlen_remaining"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"do"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pktlen_remaining"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"<"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"MIN_QUERY_LEN"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"comment",
        "value":"-- old way: queries_tree:add_expert_info(PI_MALFORMED, PI_ERROR, \"query field missing or too short\")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"identifier",
        "value":"queries_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add_proto_expert_info"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"ef_bad_query"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"comment",
        "value":"-- we don't know how long this query field in total is, so we have to parse it first before"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"comment",
        "value":"-- adding it to the tree, because we want to identify the correct bytes it covers"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"label_count"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name_len"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"getQueryName"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"pktlen_remaining"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"not"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"label_count"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"identifier",
        "value":"q_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add_expert_info"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"PI_MALFORMED"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PI_ERROR"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"comment",
        "value":"-- now add the first query to the 'Queries' child tree we just created"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"comment",
        "value":"-- we're going to change the string generated by this later, after we figure out the subsequent fields."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"comment",
        "value":"-- the whole query field is the query name field length we just got, plus the 20 byte type and 2-byte class"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"q_tree"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"queries_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_query"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name_len"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"4"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"q_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_query_name"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name_len"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name_len"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"pktinfo"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"cols"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"info"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"append"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\" \""
    },
    {
        "type":"operator",
        "value":".."
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"comment",
        "value":"-- the following tree items are generated by us, not encoded in the packet per se, so mark them as such"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"q_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_query_name_len"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name_len"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"set_generated"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"q_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_query_label_count"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"label_count"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"set_generated"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"q_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_query_type"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"q_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pf_query_class"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"4"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"comment",
        "value":"-- now change the query text"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"q_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"set_text"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"operator",
        "value":".."
    },
    {
        "type":"string",
        "value":"\": type \""
    },
    {
        "type":"operator",
        "value":".."
    },
    {
        "type":"function",
        "value":"query_type_field"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"display"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":".."
    },
    {
        "type":"string",
        "value":"\", class \""
    },
    {
        "type":"operator",
        "value":".."
    },
    {
        "type":"function",
        "value":"query_class_field"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"display"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"pktlen_remaining"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pktlen_remaining"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"name_len"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"4"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"num_queries"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"num_queries"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"comment",
        "value":"-- end of while loop"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"num_queries"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"comment",
        "value":"-- we didn't process them all"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"identifier",
        "value":"queries_tree"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add_expert_info"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"PI_MALFORMED"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PI_ERROR"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"num_queries"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":".."
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\" query field(s) missing\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"function",
        "value":"dprint2"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"dns.dissector returning\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- tell wireshark how much of tvbuff we dissected"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"----------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- we want to have our protocol dissection invoked for a specific UDP port,"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- so get the udp dissector table and add our protocol to it"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"identifier",
        "value":"DissectorTable"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"get"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"udp.port\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"port"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"----------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- we also want to add the heuristic dissector, for any UDP protocol"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- first we need a heuristic dissection function"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- this is that function - when wireshark invokes this, it will pass in the same"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- things it passes in to the \"dissector\" function, but we only want to actually"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- dissect it if it's for us, and we need to return true if it's for us, or else false"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- figuring out if it's for us or not is not easy"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- we need to try as hard as possible, or else we'll think it's for us when it's"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- not and block other heuristic dissectors from getting their chance"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"--"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- in practice, you'd never set a dissector like this to be heuristic, because there"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- just isn't enough information to safely detect if it's DNS or not"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- but I'm doing it to show how it would be done"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"--"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- Note: this heuristic stuff is new in 1.11.3"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"function"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"function",
        "value":"heur_dissect_dns"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"pktinfo"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"root"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"function",
        "value":"dprint2"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"heur_dissect_dns called\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- if our preferences tell us not to do this, return false"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"not"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"default_settings"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"heur_enabled"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"false"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"len"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"<"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"DNS_HDR_LEN"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"function",
        "value":"dprint"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"heur_dissect_dns: tvb shorter than DNS_HDR_LEN of:\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"DNS_HDR_LEN"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"false"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"DNS_HDR_LEN"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- the first 2 bytes are transaction id, which can be anything so no point in checking those"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- the next 2 bytes contain flags, a couple of which have some values we can check against"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- the opcode has to be 0, 1, 2, 4 or 5"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- the opcode field starts at bit offset 17 (in C-indexing), for 4 bits in length"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbr"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"bitfield"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"17"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"number",
        "value":"4"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"=="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"3"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"or"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"5"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"function",
        "value":"dprint"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"heur_dissect_dns: invalid opcode:\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"false"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- the rcode has to be 0-10, 16-22 (we're ignoring private use rcodes here)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- the rcode field starts at bit offset 28 (in C-indexing), for 4 bits in length"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbr"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"bitfield"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"28"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"number",
        "value":"4"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"22"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"or"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"10"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"<"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"16"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"function",
        "value":"dprint"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"heur_dissect_dns: invalid rcode:\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"false"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"function",
        "value":"dprint2"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"heur_dissect_dns checking questions/answers\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- now let's verify the number of questions/answers are reasonable"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbr"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"4"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"uint"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"comment",
        "value":"-- num questions"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"100"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"false"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbr"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"6"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"uint"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"comment",
        "value":"-- num answers"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"100"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"false"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbr"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"8"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"uint"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"comment",
        "value":"-- num authority"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"100"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"false"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbr"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"range"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"10"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"uint"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"comment",
        "value":"-- num additional"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"check"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"100"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"false"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"function",
        "value":"dprint2"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"heur_dissect_dns: everything looks good calling the real dissector\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- don't do this line in your script - I'm just doing it so our test-suite can"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- verify this script"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"root"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"add"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"Heuristic dissector used\""
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"set_generated"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- ok, looks like it's ours, so go dissect it"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- note: calling the dissector directly like this is new in 1.11.3"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- also note that calling a Dissector object, as this does, means we don't"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- get back the return value of the dissector function we created previously"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- so it might be better to just call the function directly instead of doing"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- this, but this script is used for testing and this tests the call() function"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"function",
        "value":"dissector"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"tvbuf"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"pktinfo"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"root"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- since this is over a transport protocol, such as UDP, we can set the"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- conversation to make it sticky for our dissector, so that all future"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- packets to/from the same address:port pair will just call our dissector"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- function directly instead of this heuristic function"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- this is a new attribute of pinfo in 1.11.3"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"pktinfo"
    },
    {
        "type":"operator",
        "value":"."
    },
    {
        "type":"identifier",
        "value":"conversation"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"true"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- now register that heuristic dissector into the udp heuristic list"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"identifier",
        "value":"dns"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"register_heuristic"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"string",
        "value":"\"udp\""
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"identifier",
        "value":"heur_dissect_dns"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- We're done!"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- our protocol (Proto) gets automatically registered after this script finishes loading"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"----------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"----------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- DNS query names are not just null-terminated strings; they're actually a sequence of"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- 'labels', with a length octet before each one.  So \"foobar.com\" is actually the"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- string \"\\06foobar\\03com\\00\".  We could create a ProtoField for label_length and label_name"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- or whatever, but since this is an example script I'll show how to do it in raw code."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- This function is given the TvbRange object from the dissector() function, and needs to"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- parse it."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- On success, it returns three things: the number of labels, the name string, and how"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- many bytes it covered of the buffer (which is always 2 more than the name length in this case)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"-- On failure, it returns nil and the error message."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"identifier",
        "value":"getQueryName"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"function"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"tvbr"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"label_count"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"\""
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"len_remaining"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbr"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"len"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"len_remaining"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"<"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- it's too short"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"nil"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"invalid name\""
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"barray"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"tvbr"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"bytes"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"-- gets a ByteArray of the TvbRange"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"-- unlike Lua, ByteArray uses 0-based indexing"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- get the first octet/label-length"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"local"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"label_len"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"barray"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"get_index"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"label_len"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"=="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"nil"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"invalid initial label length of 0\""
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"while"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"label_len"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"do"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"if"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"label_len"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":">="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"len_remaining"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"then"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"            "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"value",
        "value":"nil"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\"invalid label length of \""
    },
    {
        "type":"operator",
        "value":".."
    },
    {
        "type":"identifier",
        "value":"label_len"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"comment",
        "value":"-- move past label length octet"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- append the label and a dot to name string"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"-- note: this uses the new method of ByteArray:raw(), added in 1.11.3"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":".."
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"barray"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"raw"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"label_len"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":".."
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"\".\""
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"identifier",
        "value":"len_remaining"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"len_remaining"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"label_len"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"-- subtract label and its length octet"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"identifier",
        "value":"label_count"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"label_count"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"label_len"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"-- move past label"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"identifier",
        "value":"label_len"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"barray"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"get_index"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"identifier",
        "value":"pos"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"comment",
        "value":"-- we appended an extra dot, so get rid of it"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"sub"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"return"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"label_count"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"name"
    },
    {
        "type":"operator",
        "value":":"
    },
    {
        "type":"function",
        "value":"len"
    },
    {
        "type":"group",
        "value":"("
    },
    {
        "type":"group",
        "value":")"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"keyword",
        "value":"end"
    },
    {
        "type":"newline",
        "value":"\r\n"
    }
]
