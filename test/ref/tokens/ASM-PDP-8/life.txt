[
    {
        "type":"comment",
        "value":"///"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Conway's Life for the PDP-8."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Algorithm adapted from Chapter 17 of \"Graphics Programming Black Book\" By  Michael Abrash."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// http://www.gamedev.net/page/resources/_/technical/graphics-programming-and-theory/graphics-programming-black-book-r1698"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// (See Listing 17.5)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// If the Switch Register is all 0's on startup,"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// a hard-coded \"glider\" test pattern is loaded into the grid."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Otherwise, the Switch Register value is used as a pseudo-random seed"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// to generate the starting pattern."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"///"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Assembly-time Constants."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Grid Size."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Grid dimensions for emulator \"Run PDP-8 Screen\"."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//numRows=15d"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//numCols=77d"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//numCells=1155d"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Grid dimensions for use with PDP-8 emulator debug memory display."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"numRows"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"12"
    },
    {
        "type":"identifier",
        "value":"d"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"numCols"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"8"
    },
    {
        "type":"identifier",
        "value":"d"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"numCells"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"96"
    },
    {
        "type":"identifier",
        "value":"d"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Grid dimensions to maximize use of VT-100 terminal in PDP-8/E Java Emulator http://www.vandermark.ch/pdp8/index.php"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//numRows=22d"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//numCols=80d"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//numCells=1760d // 22 rows by 80 cols. Word per cell implies 14 pages of 128 words per page."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"numColP1"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"identifier",
        "value":"numCols"
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"numColM1"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"identifier",
        "value":"numCols"
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"numCellM1"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"identifier",
        "value":"numCells"
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// ASCII Character Codes."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"asciiEsc"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"27"
    },
    {
        "type":"identifier",
        "value":"d"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Escape"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"asciiSpace"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"32"
    },
    {
        "type":"identifier",
        "value":"d"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Space (Blank)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"asciiCR"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"13"
    },
    {
        "type":"identifier",
        "value":"d"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Carriage Return"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"asciiLF"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"10"
    },
    {
        "type":"identifier",
        "value":"d"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Line Feed"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"incrNbrCount"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"0100"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Increment neighbor count in high half word."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"decrNbrCount"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"identifier",
        "value":"incrNbrCount"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Decrement neighbor count in high half word."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"///"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Page 0 is always directly-addressable."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Auto-Index \"Register\" addresses."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"air0"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"10"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"air1"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"11"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"air2"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"12"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"air3"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"13"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"air4"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"14"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"air5"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"15"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"air6"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"16"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"air7"
    },
    {
        "type":"operator",
        "value":"="
    },
    {
        "type":"number",
        "value":"17"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"///"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"*0020"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Bit Masks."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"mNbrCount"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0017"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Right 4 bits to store 0 thru 8 as Neighbor Count."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"mCellOnLo"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0020"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Cell marked \"on\" in lo half (5th bit from right)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"mCellOnHi"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"2000"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Cell marked \"on\" in hi half."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"mCellOffHi"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"5777"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Clear \"on\" bit in hi half."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"mLoHalf"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0077"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Right 6 bits."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"mHiHalf"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"7700"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Left 6 bits."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"mRandBits"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0017"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Right 4 bits for random # (0 to 15)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"mLoOctalDigit"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0007"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Right-most octal digit."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Memory Constants."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"cMinusOne"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"cMinusTwo"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"cMinusThree"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"number",
        "value":"3"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"cNumCols"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"numCols"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"cNumCells"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"numCells"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// String and Character Constants."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"szClrScreen"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"."
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// VT-100 Clear Screen."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"asciiEsc"
    },
    {
        "type":"statement separator",
        "value":";"
    },
    {
        "type":"string",
        "value":"'[2J'"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"szCrsrHome"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"."
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// VT-100 Cursor Home."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"asciiEsc"
    },
    {
        "type":"statement separator",
        "value":";"
    },
    {
        "type":"string",
        "value":"'[0;0H'"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"szSeed"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"."
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Random seed display message."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"string",
        "value":"'  Seed: '"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"szGeneration"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"."
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Generation display message."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"string",
        "value":"'  Generation: '"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"szNewLine"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"."
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Carriage-Return/Line-Feed combination."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"asciiCR"
    },
    {
        "type":"statement separator",
        "value":";"
    },
    {
        "type":"identifier",
        "value":"asciiLF"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"charSpace"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"asciiSpace"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"charZero"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"'0'"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"charStar"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"string",
        "value":"'*'"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Neighbor Cell Offsets."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"cellOffsets"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"."
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Base address to load into auto-index register."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"coNW"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"identifier",
        "value":"numColP1"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"coN"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"identifier",
        "value":"numCols"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"coNE"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"identifier",
        "value":"numColM1"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"coE"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"coSE"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"numColP1"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"coS"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"numCols"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"coSW"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"numColM1"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"coW"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"coSelf"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Terminate loop."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Array Pointers."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"pNWWrapCell"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"NWWrapCell"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Extra \"northwest\" wrap cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"pTopWrapRow"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CellBuffer"
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Preceding address for auto-indexing to top wrap row."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"pGridCells"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CellBuffer"
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"identifier",
        "value":"numColM1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Preceding address for actual cell grid (after top wrap row)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"pBotWrapRow"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CellBuffer"
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"identifier",
        "value":"numCols"
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"identifier",
        "value":"numCellM1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Preceding address for bottom wrap row (after top wrap row and grid)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"pSEWrapCell"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CellBuffer"
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"identifier",
        "value":"numCols"
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"identifier",
        "value":"numCells"
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"identifier",
        "value":"numCols"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Extra \"southeast\" wrap cell (after top wrap row, cell grid, and bottom wrap row.)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"pNWPairCell"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"NWWrapCell"
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"identifier",
        "value":"numCells"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Pair for \"northwest\" wrap cell (just before top pair row)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"pTopPairRow"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CellBuffer"
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"identifier",
        "value":"numCellM1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Preceding address for pair for top wrap row (just after NW pair)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"pBotPairRow"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CellBuffer"
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"identifier",
        "value":"numColM1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Preceding address for pair for bottom wrap row (same as grid)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"pSEPairCell"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CellBuffer"
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"identifier",
        "value":"numCols"
    },
    {
        "type":"operator",
        "value":"+"
    },
    {
        "type":"identifier",
        "value":"numCols"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Pair for \"southwest\" wrap cell (just after bottom pair row)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine Pointers."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"SkipIfChar"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srSkipIfChar"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"GetChar"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srGetChar"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PutChar"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srPutChar"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PutString"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srPutString"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PutNewLine"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srPutNewLine"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PutOctal"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srPutOctal"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"SetRand"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srSetRand"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"GetRand"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srGetRand"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"EmuMUY"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srEmuMUY"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"ClrGeneration"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srClrGeneration"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"LoadSeed"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srLoadSeed"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"ShowSeedAndGeneration"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srShowSeedAndGeneration"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"ClrWrap"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srClrWrap"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"ClrGrid"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srClrGrid"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"RandomizeGrid"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srRandomizeGrid"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"InitGrid"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srInitGrid"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"ShowGrid"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srShowGrid"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"ProcessGeneration"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srProcessGeneration"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CloneGrid"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srCloneGrid"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CloneCell"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srCloneCell"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CellBorn"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srCellBorn"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CellDied"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srCellDied"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CellNeighbors"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srCellNeighbors"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"ProcWrap"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srProcWrap"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Global Variables."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"gGeneration"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"gSeed"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"///"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Main Code Page."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"*0200"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"Main"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Clear AC and Link."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tls"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"/ Wake Up Printer (terminal display)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"LoadSeed"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ClrGeneration"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ShowSeedAndGeneration"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ClrWrap"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ClrGrid"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"InitGrid"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CloneGrid"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ShowGrid"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SkipIfChar"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"MainLoop"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"MainPause"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"MainLoop"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProcessGeneration"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CloneGrid"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ShowGrid"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SkipIfChar"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"MainLoop"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"MainPause"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"hlt"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Halt."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"MainLoop"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Resume loop if user continues via front-panel."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"directive",
        "value":"End"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Clear AC and Link."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"hlt"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Halt."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"Main"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Restart if user continues via front panel."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Application Subroutines."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"*0400"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Load Seed from Switch Register."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Parameter: Switch Register."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Updates: Global value gSeed."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srLoadSeed"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Clear AC and Link."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"osr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Or the Switch Register bits into AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"gSeed"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Save random seed."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srLoadSeed"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Clear Generation."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// No parameter."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Updates: Global value gGeneration."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srClrGeneration"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"gGeneration"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"szClrScrn"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PutString"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srClrGeneration"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Show Seed."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Global value: gSeed."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// No parameter."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srShowSeedAndGeneration"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"szCrsrHome"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PutString"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"szSeed"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PutString"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"gSeed"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PutOctal"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"szGeneration"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PutString"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"gGeneration"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PutOctal"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PutNewLine"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srShowSeedAndGeneration"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Clear Wrap rows and cells."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// No parameter."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Registers: air1 air2"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//  "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srClrWrap"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pNWWrapCell"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Clear corner wrap cells."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pSEWrapCell"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"cNumCols"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Clear top and bottom wrap rows."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"cia"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Negate."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CWLoopCount"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pTopWrapRow"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load address of top wrap row."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Set 1st index register to loop thru top wrap row."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pBotWrapRow"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load address of bottom wrap row."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air2"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Set 2nd index register to loop thru bottom wrap row."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CWWrapLoop"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Clear indirectly-indexed cells."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air2"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"isz"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CWLoopCount"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CWWrapLoop"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Non-zero counter, keep looping."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srClrWrap"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Else, done looping so return."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CWLoopCount"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Clear Grid cells."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// No parameter."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Registers: air0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srClrGrid"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CGLoopCount"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"cNumCells"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"cia"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Negate"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CGLoopCount"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pGridCells"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load address of grid cells."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Set index register to loop thru grid cell array."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CGGridLoop"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Clear next grid cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"isz"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CGLoopCount"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CGGridLoop"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Non-zero counter, keep looping."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srClrGrid"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Else, done looping so return."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CGLoopCount"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Initialize Grid cells to a predetermined pattern."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// No parameter."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Register: air0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srInitGrid"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"gSeed"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load random seed global value into AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"sna"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Skip if non-zero AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"IGFixedPattern"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Else, zero means use fixed pattern."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SetRand"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Set the value as the pseudo-random seed."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"RandomizeGrid"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Use the random pattern generator."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srInitGrid"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// And return.  "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"IGFixedPattern"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"szIGPattern"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load pattern preceding address."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// And save in auto-indexing register."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"cNumCols"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load # columns,"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"IGMultiplier"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// And save as multiplier parameter."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"IGLoop"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Get next row offset (1-based)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"sna"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Skip if non-zero."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"IGFinish"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Else, finish up if AC = 0."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"cMinusOne"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Subtract 1 to make it 0-based."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"EmuMUY"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Multiply by column count."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"IGMultipler"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Self-modified parameter value."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Add in column offset (1-based)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pGridCells"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Add in grid base preceding address."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CellBorn"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Process new cell birth."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"IGLoop"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// And loop to next cell pattern."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"IGFinish"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProcWrap"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Process wrap row neighbor counts."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ClrWrap"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Clear wrap rows for next iteration."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srInitGrid"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"IGCurrAddr"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"szIGPattern"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"."
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Null-terminated row/col offset list."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"statement separator",
        "value":";"
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Glider"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"statement separator",
        "value":";"
    },
    {
        "type":"number",
        "value":"3"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"number",
        "value":"3"
    },
    {
        "type":"statement separator",
        "value":";"
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"statement separator",
        "value":";"
    },
    {
        "type":"number",
        "value":"3"
    },
    {
        "type":"statement separator",
        "value":";"
    },
    {
        "type":"number",
        "value":"2"
    },
    {
        "type":"statement separator",
        "value":";"
    },
    {
        "type":"number",
        "value":"3"
    },
    {
        "type":"statement separator",
        "value":";"
    },
    {
        "type":"number",
        "value":"3"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Null-terminator."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Randomize Grid cells."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// No parameter."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srRandomizeGrid"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pGridCells"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"RGCurrCell"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pGridCells"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"cNumCells"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"comment",
        "value":"// Compute last cell pointer for grid."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"RGLastCell"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"RGLoop"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"GetRand"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Get a random integer."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"mRandBits"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"comment",
        "value":"// Only keep 6 bits (0 to n-1)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"iac"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Add 1 (1 to n)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"RGCurrCell"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"comment",
        "value":"// Add random offset to cell pointer."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"RGCurrCell"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"RGCurrCell"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Reload and negate current cell pointer."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"cia"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"RGLastCell"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Subtract from last cell pointer."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"spa"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Skip if AC >= 0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"RGFinish"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Else, finish up if negative."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"RGCurrCell"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load address of current cell into AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CellBorn"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Process new cell birth."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"RGLoop"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"RGFinish"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProcWrap"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Process wrap row neighbor counts."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ClrWrap"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Clear wrap rows for next iteration."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srRandomizeGrid"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"RGCurrCell"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"RGLastCell"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"*0600"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Show Grid cells."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// No parameter."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Registers: air0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srShowGrid"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pGridCells"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load address of grid array."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Store pointer in auto-index register."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"cNumCols"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"cia"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SGMColCount"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Store minus rows per cell count."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SGMColCount"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SGColCount"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Copy to actual column cell loop counter."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"cNumCells"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"cia"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SGLoopCount"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Store negative cell count."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"SGLoop"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Loop thru each grid cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"mCellOnLo"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Mask just \"on\" bit in lo half (current state)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"sza"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Skip if zero (treat as dead)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SGLive"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Else treat as live."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"SGDead"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"charSpace"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SGPutChar"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"SGLive"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"charStar"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"SGPutChar"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PutChar"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Display space or star based on cell status."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"isz"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SGLoopCount"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// See if we have processed all grid cells."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SGRowCheck"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// If not, check if we've reached the end of a row."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PutNewLine"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srShowGrid"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"SGRowCheck"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"isz"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SGColCount"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Increment columns-per-row counter"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SGLoop"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Loop to next cell if non-zero."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PutNewLine"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SGMColCount"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Reset col-per-row counter."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SGColCount"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"SGLoop"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Then loop to next cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"SGLoopCount"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"SGMColCount"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"SGColCount"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Process Generation iteration."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// No parameter."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srProcessGeneration"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"isz"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"gGeneration"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Increment generation # (Never will be zero, so will never skip.)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ShowSeedAndGeneration"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pGridCells"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGCurrAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Initialize current cell address."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"cNumCells"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Setup counter for processing each grid cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"cia"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Negate."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGLoopCount"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PGCellLoop"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"isz"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGCurrAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Increment current grid cell address. (Will never skip.)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGCurrAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load cell state into AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"sna"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Skip if AC non-zero."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGCheckLoop"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Else, loop to next cell if current one is empty (also means no neighbors)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"mNbrCount"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Mask to check living neighbor count."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGNbrCount"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Save in local variable."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGCurrAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Re-load current cell state."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"mCellOnLo"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Mask to check only current state \"live\" bit."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"sna"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Skip if AC non-zero (cell is \"live\")."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGIsDead"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Else process \"dead\" cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PGIsLive"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGNbrCount"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Get neighbor count."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"cMinusTwo"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Subtract 2."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"spa"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Skip if >= 0 (count >= 2)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGDied"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Else cell just died due to under-population."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"cMinusOne"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Subtract 1 (Now at original count - 3)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"sma"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"sza"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Skip if <= 0 (count <= 3)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGDied"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Else cell just died due to overcrowding."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGCheckLoop"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Otherwise, cell stays alive so process next cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PGIsDead"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGNbrCount"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Get neighbor count.  (AC was already zero)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"cMinusThree"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Subtract 3."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"sza"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Skip if = 0 (count = 3)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGCheckLoop"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Else cell stays dead so process next cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PGBorn"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGCurrAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load address of current cell. (AC was already zero.)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CellBorn"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Create new cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGCheckLoop"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Process next cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PGDied"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGCurrAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load address of current cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CellDied"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Kill cell, then process next cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PGCheckLoop"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"isz"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGLoopCount"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PGCellLoop"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Continue looping if non-zero. "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PGFinish"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ProcWrap"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Process wrapped neighbor counts."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"ClrWrap"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Clear wrapped counts for next iteration.  "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srProcessGeneration"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PGCurrAddr"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PGLoopCount"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PGNbrCount"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Cell Born."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Parameter: AC contains address of cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srCellBorn"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CBCellAddr"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CBCellAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load current cell state."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"mql"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Move to MQ register and clear AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"mCellOnHi"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load mask to turn on \"live\" bit in hi half word."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"mqa"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// \"Or\" in current cell state."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CBCellAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// And store back in cell grid position."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CBCellAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Reload grid cell address."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CellNeighbors"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Increment cell neighbor counts"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"incrNbrCount"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srCellBorn"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return when done."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CBCellAddr"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Cell Died."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Parameter: AC contains address of cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srCellDied"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CDCellAddr"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CDCellAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load current cell state."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"mCellOffHi"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Clear \"live\" bit in hi half word."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CDCellAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// And store back in cell grid position."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CDCellAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Reload grid cell address."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CellNeighbors"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Increment cell neighbor counts"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"identifier",
        "value":"decrNbrCount"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srCellDied"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return when done."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CDCellAddr"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Cell Neighbor count update."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Parameter: AC contains address of cell, word after call contains increment or decrement constant."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Registers: air7"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srCellNeighbors"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CNCellAddr"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srCellNeighbors"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load increment or decrement."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CNIncrDecr"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"isz"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srCellNeighbors"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Prepare for skip-return."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"cellOffsets"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load index register with address before neighbor cell offsets list."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air7"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CNLoop"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air7"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load offset to a neighbor cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"sna"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Skip if non-zero"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srCellNeighbors"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Else, return if offset was zero."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CNCellAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load address of current cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CNNbrAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// And save as neighbor cell address."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CNNbrAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load neighbor cell current state."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CNIncrDecr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// And increment or decrement that cell's neighbor count (hi half word)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CNNbrAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// And store back to grid cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CNLoop"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CNCellAddr"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CNNbrAddr"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CNIncrDecr"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"*1000"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Process Wrap row and cell neighbor counts against intended cells."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// No parameter."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Registers: air1 air2"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//  "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srProcWrap"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pNWWrapCell"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load corner wrap cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"mHiHalf"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Mask to only keep hi half."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pNWPairCell"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Add in grid pair cell state."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pNWPairCell"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// And save back to grid."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pSEWrapCell"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Repeat for other corner wrap/pair."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"mHiHalf"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pSEPairCell"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pSEPairCell"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pTopWrapRow"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load address of top wrap row."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Set 1st index register to loop thru top wrap row."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pBotWrapRow"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load address of bottom wrap row."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air2"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Set 2nd index register to loop thru bottom wrap row."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pTopPairRow"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load address of top pair row."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PWTopAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Save in local variable."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pBotPairRow"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load address of bottom pair row."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PWBotAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Save in local variable."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"cNumCols"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Setup counter for clearing top and bottom wrap rows."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"cia"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Negate."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PWLoopCount"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PWWrapLoop"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load wrapped top row neighbor count."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"mHiHalf"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Mask to only keep hi half."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"isz"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PWTopAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Increment top pair row cell address (will never skip)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PWTopAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Add in top pair row cell state"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PWTopAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Store result back to grid cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air2"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load wrapped bottom row neighbor count."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"mHiHalf"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Mask to only keep hi half."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"isz"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PWBotAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Increment bottom pair row cell address (will never skip)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PWBotAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Add in bottom pair row cell state."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PWBotAddr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Store result back to grid cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"isz"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PWLoopCount"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Increment loop counter."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PWWrapLoop"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Non-zero counter, keep looping."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srProcWrap"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Done looping, so return."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PWLoopCount"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PWTopAddr"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PWBotAddr"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Clone Grid Cells from prior iteration state to current."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Parameters: None."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Registers: air1, air2"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srCloneGrid"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"pGridCells"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load address of grid array."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Store pointer in 1st auto-index register."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Copy to 2nd index register."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air2"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"cNumCells"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"cia"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CGCLoopCount"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Store negative cell count."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CGCLoop"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Loop thru each grid cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"sza"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Skip if zero."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CloneCell"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Copy hi half (prior state) to lo half (current state)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air2"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Store cloned result back to grid cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"isz"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CGCLoopCount"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// See if we have processed all grid cells."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"CGCLoop"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// If not, keep looping."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srCloneGrid"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CGCLoopCount"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Clone Cell State from prior iteration state to current."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Clone the left-half of the AC into the right-half."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Parameter: AC contains the cell contents to be cloned from the left (hi) half to the right (lo) half."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Returns: Cloned result in AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srCloneCell"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"mHiHalf"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Mask to keep only left-half of AC"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"mql"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Move AC to MQ and clear AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"mqa"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Copy MQ back to AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"rtr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Rotate AC twice right."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"rtr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// 2 more bits."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"rtr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Total of 6 bits rotation."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"mqa"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// OR in original high-half."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srCloneCell"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Utility Subroutines."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"*1200"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Skip If Character ready."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Check for keyboard character. "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Skip-return if present, returning the character in the AC. "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Else just return."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srSkipIfChar"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"ksf"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Is Keyboard Flag Raised?"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srSkipIfChar"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// No, just return."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"krb"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Yes - Read Character to AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"isz"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srSkipIfChar"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Increment return address."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srSkipIfChar"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return to \"skip\" address."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Read a keyboard character.  Wait until one appears."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srGetChar"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"ksf"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Is Keyboard Flag Raised?"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"."
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// No - Loop! (Wait Loop)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"krb"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Yes - Read Character to AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srGetChar"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Put Character to display."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Parameter: AC contains character."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srPutChar"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tsf"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Is Printer Ready?"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"."
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"number",
        "value":"1"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// No - Loop! (Wait Loop)"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tls"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Yes - Print the character!"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Clear AC and Link"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srPutChar"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Put String to terminal."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Display a null-terminated string."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Parameter: AC contains address of word preceding null-terminated string to display."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Registers: air6"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srPutString"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air6"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Deposit address of string to auto-index register."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"air6"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Load character."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"sna"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Is it a null? - skip if non-zero."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srPutString"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"/ Yes - return if zero."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srPutChar"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"/ No - display character (subroutines on same page)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"."
    },
    {
        "type":"operator",
        "value":"-"
    },
    {
        "type":"number",
        "value":"4"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"/ Get next character."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Put New Line to terminal (Carriage-Return/Line-Feed combination)."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Parameters: None."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srPutNewLine"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"cla"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"cll"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"szNewLine"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PutString"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srPutNewLine"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Put Octal value to terminal."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Display a 4-digit octal value."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Parameter: AC contains the value to display."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srPutOctal"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"mql"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Move AC to MQ and clear AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"mqa"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Copy MQ back to AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"mLoOctalDigit"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Mask to keep only low octal digit."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"charZero"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Convert to display digit."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"Octal0Digit"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"mqa"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Copy MQ to AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"rtr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Rotate right 2 bits."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"rar"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Rotate right 1 bit."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"mql"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Move AC to MQ and clear AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"mqa"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Copy MQ back to AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"mLoOctalDigit"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Mask to keep only low octal digit."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"charZero"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Convert to display digit."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"Octal1Digit"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"mqa"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Copy MQ to AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"rtr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Rotate right 2 bits."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"rar"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Rotate right 1 bit."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"mql"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Move AC to MQ and clear AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"mqa"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Copy MQ back to AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"mLoOctalDigit"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Mask to keep only low octal digit."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"charZero"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Convert to display digit."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"Octal2Digit"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"mqa"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Copy MQ to AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"rtr"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Rotate right 2 bits."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"rar"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Rotate right 1 bit."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"and"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"mLoOctalDigit"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Mask to keep only low octal digit."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"charZero"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Convert to display digit."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"Octal3Digit"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"tad"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"OctalDigits"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jms"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"PutString"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srPutOctal"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"OctalDigits"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"."
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"Octal3Digit"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"Octal2Digit"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"Octal1Digit"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"Octal0Digit"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"OctalNullTerminator"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//------------------------------------------------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// The following srroutines are courtesy of:"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// https://www.grc.com/pdp-8/deepthought-sbc.htm"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Set Random number seed."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Parameter: AC contains seed value."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srSetRand"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"dca"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"LastRand"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"keyword",
        "value":"jmp"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"i"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"identifier",
        "value":"srSetRand"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Return."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Get Random number."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//   This is the simplest way I know of to generate highly random"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//   looking 12-bit values.  It's a Linear Congruential Pseudo Random"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//   Number Generator (LCPRNG).  Each time it's called, it evaluates"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//   the expression:  NextRand = LastRand * 5545 + 541 (all octal)             "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// No parameters."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Returns: Random number in AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srGetRand"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"CLA"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"CLL"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"TAD"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"LastRand"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"// get the last PRNG value"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"JMS"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"I"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"EmuMUY"
    },
    {
        "type":"whitespace",
        "value":"          "
    },
    {
        "type":"comment",
        "value":"// multiply by the following constant:"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                  "
    },
    {
        "type":"number",
        "value":"5545"
    },
    {
        "type":"whitespace",
        "value":"                  "
    },
    {
        "type":"comment",
        "value":"// 2917 base 10 - LCPRNG multiplicand"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"TAD"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"cRandAdd"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"// sum in our LCPRNG addend"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"DCA"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"LastRand"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"// save this for next time"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"TAD"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"AccumHigh"
    },
    {
        "type":"whitespace",
        "value":"       "
    },
    {
        "type":"comment",
        "value":"// return the HIGH 12-bits as our result"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"JMP"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"I"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"srGetRand"
    },
    {
        "type":"whitespace",
        "value":"       "
    },
    {
        "type":"comment",
        "value":"// return the AC to the caller"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"LastRand"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"       "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":"                       "
    },
    {
        "type":"comment",
        "value":"// our previous random value"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"cRandAdd"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"       "
    },
    {
        "type":"number",
        "value":"541"
    },
    {
        "type":"whitespace",
        "value":"                     "
    },
    {
        "type":"comment",
        "value":"// 353 base 10"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Subroutine: Emulate Multiply instruction."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//   This is a full 12x12 multiply, needed because the emulated PDP-8"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//   lacks the EAE \"Extended Arithmetic Element\" multiplier."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Parameters:"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//   AC contains Multiplier."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//   The word after the call has Multiplicand."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Returns:"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//   Least significant 12-bits in AC."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//   Most significant 12-bits in AccumHigh."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"srEmuMUY"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"       "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":"                      "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"DCA"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"Multiplier"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"comment",
        "value":"// save the multiplier for shifting              "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"TAD"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"cMinus12"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"// setup our -12 loop counter"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"DCA"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"PhaseCount"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"DCA"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"AccumLow"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"// clear our 24-bit results accumulator"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"DCA"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"AccumHigh"
    },
    {
        "type":"whitespace",
        "value":"       "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"MultShift"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"keyword",
        "value":"TAD"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"Multiplier"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"comment",
        "value":"// get a bit from the multiplier"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"CLL"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"RAL"
    },
    {
        "type":"whitespace",
        "value":"                 "
    },
    {
        "type":"comment",
        "value":"// move the high-bit into LINK"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"DCA"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"Multiplier"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"comment",
        "value":"// put the updated multiplier back"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"SNL"
    },
    {
        "type":"whitespace",
        "value":"                     "
    },
    {
        "type":"comment",
        "value":"// we do need to add-in the multiplicand"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"JMP"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"MultIterate"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"comment",
        "value":"// no multiplicand add-in"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"TAD"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"I"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"srEmuMUY"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"// add the multiplicand into accumulator"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"TAD"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"AccumLow"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"// this *may* overflow, clearing the LINK"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"DCA"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"AccumLow"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"// either way, put the updated low 12 back"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"SNL"
    },
    {
        "type":"whitespace",
        "value":"                     "
    },
    {
        "type":"comment",
        "value":"// if LINK is still '1', no overflow"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"ISZ"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"AccumHigh"
    },
    {
        "type":"whitespace",
        "value":"       "
    },
    {
        "type":"comment",
        "value":"// bump the high-half if we carried out"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"MultIterate"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"    "
    },
    {
        "type":"keyword",
        "value":"ISZ"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"PhaseCount"
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"comment",
        "value":"// see whether we've done all 12 bits"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"JMP"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"Shift24"
    },
    {
        "type":"whitespace",
        "value":"         "
    },
    {
        "type":"comment",
        "value":"// not done, so shift and iterate again"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"CLL"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"CLA"
    },
    {
        "type":"whitespace",
        "value":"                 "
    },
    {
        "type":"comment",
        "value":"// return the lower 12-bits in AC"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"TAD"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"AccumLow"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"ISZ"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"srEmuMUY"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"// return to the instruction after multiplier"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"JMP"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"I"
    },
    {
        "type":"whitespace",
        "value":"  "
    },
    {
        "type":"identifier",
        "value":"srEmuMUY"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"Shift24"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"keyword",
        "value":"TAD"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"AccumLow"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"// get the lower 12-bit half"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"CLL"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"keyword",
        "value":"RAL"
    },
    {
        "type":"whitespace",
        "value":"                 "
    },
    {
        "type":"comment",
        "value":"// shift it left, high bit into LINK"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"DCA"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"AccumLow"
    },
    {
        "type":"whitespace",
        "value":"        "
    },
    {
        "type":"comment",
        "value":"// put back the new low half"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"TAD"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"AccumHigh"
    },
    {
        "type":"whitespace",
        "value":"       "
    },
    {
        "type":"comment",
        "value":"// get the upper 12-bit half"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"RAL"
    },
    {
        "type":"whitespace",
        "value":"                     "
    },
    {
        "type":"comment",
        "value":"// shift it left, LINK into low bit"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"DCA"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"AccumHigh"
    },
    {
        "type":"whitespace",
        "value":"       "
    },
    {
        "type":"comment",
        "value":"// put back the new high half"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"whitespace",
        "value":"                "
    },
    {
        "type":"keyword",
        "value":"JMP"
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"identifier",
        "value":"MultShift"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"cMinus12"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"       "
    },
    {
        "type":"number",
        "value":"7764"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"PhaseCount"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":"                       "
    },
    {
        "type":"comment",
        "value":"// our multiplier-shift counter"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"AccumLow"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"       "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":"                       "
    },
    {
        "type":"comment",
        "value":"// low 12-bits of 12x12 mult"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"AccumHigh"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"      "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":"                       "
    },
    {
        "type":"comment",
        "value":"// high 12-bits of 12x12 mult"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"Multiplier"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":"     "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":"                       "
    },
    {
        "type":"comment",
        "value":"// temp used by multiplication"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//        "
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//------------------------------------------------------------------------------"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"// Cell Array Pages."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"*2007 // Could be *2000, but *2007 aligns better in the PDP-8 emulator debug display."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"NWWrapCell"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Extra \"northwest\" wrap cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"CellBuffer"
    },
    {
        "type":"group",
        "value":","
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"number",
        "value":"0"
    },
    {
        "type":"whitespace",
        "value":" "
    },
    {
        "type":"comment",
        "value":"// Array of top wrap row, cell grid, bottom wrap row, and \"southeast\" wrap cell."
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"//"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"comment",
        "value":"///"
    },
    {
        "type":"newline",
        "value":"\r\n"
    },
    {
        "type":"label",
        "value":"$Main"
    }
]
